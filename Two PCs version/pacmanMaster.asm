rectangle_draw MACRO	color,x_start,x_end,y_start,y_end
	               local CUR_DRW_COL
	               local CUR_DRW_ROW
	               mov   al,color
	               mov   cx,x_start
	               mov   di,x_start
	               mov   dx,y_start
	               mov   bx,x_end
	               mov   bp,y_end
	CUR_DRW_ROW:   
	CUR_DRW_COL:   
	               MOV   AH,0CH
	               INT   10H
	               INC   CX
	               CMP   CX, BX
	               JNE   CUR_DRW_COL
				   
	               MOV   CX,DI
	               INC   DX
	               CMP   DX,BP
	               JNE   CUR_DRW_ROW
ENDM

DRAW_IMAGE MACRO img_array,imgW,imgH,imgX,imgY
	           MOV AX,0013H
	           INT 10H
	           MOV CX, imgW
	           mov si,cx
	           add cx, imgX
	           dec cx
	           MOV DX, imgH
	           mov bp,dx
	           add dx, imgY
	           dec dx
	           mov DI, offset img_array
	Drawit:    
	           MOV AH,0Ch
	           mov al, [DI]
	           MOV BH,00h
	           INT 10h
	Start:     
	           inc DI
	           DEC Cx
	           dec si
	           JNZ Drawit
	           MOV CX, imgW
	           mov si,cx
	           add cx,imgX
	           dec cx
	           DEC DX
	           dec bp
	           jnz Drawit
	
ENDM
UpdateStatusBar MACRO   message,sizee
	                local w345
	                mov   cx,sizee
	                lea   si,message
	                mov   dh, 24    	;Row
	                mov   bh, 0     	;Display page
	                mov   dl, 0     	;Column
	                mov   ah, 2h    	;SetCursorPosition
	                int   10h
	w345:           
	                          
	                mov   al, [si]
	                mov   bl, 0Ch   	;Color is red
	                mov   bh, 0     	;Display page
	                mov   ah, 0Eh   	;Teletype
	                int   10h
	                inc   si
	                loop  w345

ENDM
.MODEL huge
.STACK 128
.DATA
	game_value_to_send        db  0
	game_value_recieved       db  0

	chat_request_recieved     db  0
	chat_request_sent         db  0
	; CURRENT SEND CURSOR POSITION
	CURSOR_SEND_X             DB  0
	CURSOR_SEND_Y             DB  3

	; CURRENT RECIEVE CURSOR POSITION
	CURSOR_REC_X              DB  0
	CURSOR_REC_Y              DB  16

	; CURRENT CHARACTER
	VALUE_SENT                DB  ?
	VALUE_REC                 DB  ?


	IN_CURSOR_SEND_X          DB  0
	IN_CURSOR_SEND_Y          DB  3

	; CURRENT RECIEVE CURSOR POSITION
	IN_CURSOR_REC_X           DB  0
	IN_CURSOR_REC_Y           DB  16

	; CURRENT CHARACTER
	IN_VALUE_SENT             DB  ?
	IN_VALUE_REC              DB  ?

	;----------------------------------NewStart
	system_time               db  0
	;----------------------------------NewEnd
	

	;GET_NAME
	Get_Name_msg              db  'Please Enter Your Name:','$'
	Press_Enter               db  'Press Enter to Continue','$'
	Name1                     db  30, ?, 28 dup('$')

	;MAIN_MENU
	CHATTING_OPTION           db  '*To Start Chatting Press F1','$'
	GAMING_OPTION             db  '*To Start PacMan Game Press F2','$'
	EXIT_OPTION               db  '*To End The Program Press ESC','$'
	PRESS_ESCAPE              db  'ESC:Exit  F3:Chat','$'
	PRESS_BACKSPACE           db  'Backspace:Back to game','$'
	Level_1                   db  'Press f1 For Level 1','$'
	Level_2                   db  'press f2 For Level 2','$'
	Chat_Request_Status       db  'Chat Request Sent Waiting For Response','$'
	Chat_Recieved_Status      db  'Chat Request Received to accept press F1','$'
    
	GohstsFrozen              db  'nezorF stsohG','$'                                                                                                                                                             	;13
	Player1f                  db  'nezorF 1reyalP'                                                                                                                                                                	;14
	Player2f                  db  'nezorF 2reyalP'                                                                                                                                                                	;14
	Player1In                 db  'stsohg ot elbisivni si 1reyalP'                                                                                                                                                	;30
	Player2In                 db  'stsohg ot elbisivni si 2reyalP'                                                                                                                                                	;30
	Player1SRT                db  'tnioP tratS ot denruteR 1reyalP'                                                                                                                                               	;31
	Player2SRT                db  'tnioP tratS ot denruteR 2reyalP'                                                                                                                                               	;31
	Player1RND                db  'ecalp modnar a ot tnew 1reyalP'                                                                                                                                                	;30
	Player2RND                db  'ecalp modnar a ot tnew 2reyalP'                                                                                                                                                	;30


	STATUS_BAR_SEPRATOR       db  80 dup("_"),"$"

	Waiting_connection_Status db  'Waiting for connection...','$'
	Name2                     db  28 dup('$')
	STATUS_BAR_CLEAR          db  80 dup(" "),"$"
	
	f1                        db  59
	f2                        db  60
	space                     db  57
	f3                        db  61
	
	imgx                      equ 275
	imgy                      equ 23
	imgW                      equ 31
	imgH                      equ 107
	img                       DB  16, 16, 16, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 						41, 41, 41, 41, 41, 41, 42, 16, 16, 16, 16, 16, 16, 16, 40, 40, 40, 40, 40, 40
	                          DB  40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 16, 16, 16, 40, 40, 40, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                          DB  42, 42, 42, 42, 42, 42, 42, 42, 6, 16, 40, 40, 16, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                          DB  6, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42
	                          DB  42, 42, 42, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 186, 16, 16, 16, 16, 16, 16
	                          DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 186, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                          DB  178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 6, 6, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 178, 42, 42, 42, 42, 40, 40, 42, 40
	                          DB  40, 40, 42, 42, 114, 114, 20, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 187, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 114, 114, 20, 43, 43
	                          DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 187, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 114, 114, 20, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                          DB  43, 43, 43, 187, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 114, 114, 20, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42
	                          DB  40, 40, 42, 40, 40, 40, 42, 42, 114, 114, 28, 27, 27, 26, 26, 201, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42,42, 40, 40, 42, 40, 40, 40, 42, 42, 6
	                          DB  6, 114, 186, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 17, 128, 178, 178, 43, 43, 43
	                          DB  43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 16, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178
	                          DB  42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 42, 42, 42, 42, 40, 40, 42, 40, 40
	                          DB  40, 42, 42, 42, 42, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 114, 114, 20, 20, 20, 20
	                          DB  20, 20, 20, 20, 20, 20, 20, 16, 128, 128, 128, 178, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 6, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 178, 201
	                          DB  201, 16, 16, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 17, 17, 106, 17, 17, 43, 43, 115, 16, 178, 42, 42, 42, 42, 40
	                          DB  40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 201, 178, 178, 16, 43, 187, 116, 116, 43, 16, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42
	                          DB  42, 42, 42, 114, 114, 178, 128, 16, 16, 115, 43, 115, 43, 43, 43, 16, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 6, 106, 128, 106, 106, 186, 43, 43, 43
	                          DB  43, 42, 43, 43, 43, 43, 16, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 106, 17, 16, 16, 43, 43, 43, 43, 43, 16, 43, 43, 43, 43, 43, 178, 42
	                          DB  42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 43, 43, 43, 43, 43, 43, 42, 42, 16, 116, 187, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40
	                          DB  42, 42, 42, 42, 16, 43, 43, 43, 43, 43, 43, 42, 42, 16, 116, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 6, 16, 16, 26, 116, 43, 43, 43
	                          DB  43, 43, 43, 43, 6, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 20, 27, 26, 26, 186, 43, 43, 43, 43, 43, 43, 43, 43
	                          DB  43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 114, 16, 16, 27, 18, 42, 42, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40
	                          DB  42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 16, 24, 24, 17, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42
	                          DB  42, 42, 42, 42, 42, 114, 22, 22, 28, 16, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                          DB  16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 201, 178, 42, 42
	                          DB  42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 186, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42
	                          DB  42, 42, 42, 25, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 115, 187, 187, 187, 17, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 186, 43, 43, 43, 43
	                          DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 187, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 28, 17, 17, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                          DB  187, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 25, 28, 17, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 187, 178, 42, 42, 42, 42, 40, 40, 42
	                          DB  40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 114, 114, 25, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42
	                          DB  42, 42, 42, 16, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 201, 43, 43, 43, 43
	                          DB  43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 16, 16, 106, 106, 186, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42
	                          DB  42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 16, 106, 201, 201, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42,42, 42, 40, 40, 42, 40, 40, 40, 42, 42
	                          DB  42, 42, 42, 106, 178, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 115, 43, 43, 43, 43, 43
	                          DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 6, 6, 185, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                          DB  114, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 114, 42, 42, 42, 42, 40, 40, 42, 40
	                          DB  40, 40, 42, 42, 114, 114, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42
	                          DB  42, 42, 42, 42, 114, 114, 114, 114, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 17, 17, 17, 17, 186
	                          DB  42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 106, 186, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                          DB  40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 186, 16, 43, 43, 43, 106, 186, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42
	                          DB  42, 42, 42, 42, 42, 42, 27, 16, 43, 43, 43, 106, 186, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 27, 16, 43
	                          DB  43, 43, 106, 186, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 27, 16, 43, 43, 43, 106, 186, 42, 42, 42, 42, 42
	                          DB  42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 27, 16, 43, 43, 43, 17, 186, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40
	                          DB  40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 27, 16, 16, 16, 16, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42
	                          DB  42, 27, 31, 16, 16, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114
	                          DB  114, 6, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 114, 114, 186, 42, 42, 42, 42, 42, 114,17, 17, 178, 16, 42, 42, 42, 42, 42, 40
	                          DB  40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 185, 16, 16, 16, 42, 42, 42, 42, 42, 16, 16, 16, 178, 106, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42
	                          DB  42, 17, 43, 43, 43, 106, 16, 42, 42, 42, 22, 187, 43, 43, 116, 16, 16, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 43, 43, 187, 187, 186, 106, 42, 42
	                          DB  16, 16, 43, 17, 17, 17, 43, 128, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 43, 43, 43, 43, 43, 16, 16, 16, 20, 116, 17, 43, 43, 116, 16, 178, 6
	                          DB  6, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 43, 43, 43, 43, 115, 16, 16, 16, 22, 43, 16, 43, 43, 43, 17, 16, 114, 114, 42, 42, 40, 40, 42, 40, 40, 40
	                          DB  42, 42, 42, 42, 116, 43, 43, 43, 43, 43, 186, 16, 16, 16, 16, 43, 43, 43, 43, 43, 186, 186, 186, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 116, 43, 43, 43, 43
	                          DB  43, 16, 16, 16, 186, 17, 43, 43, 43, 43, 43, 186, 114, 114, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 115, 43, 43, 43, 43, 43, 43, 186, 186, 6, 43, 43, 43, 43
	                          DB  43, 43, 16, 6, 6, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 42, 42, 42, 42, 40, 40
	                          DB  42, 40, 40, 40, 42, 42, 42, 42, 21, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 18
	                          DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43
	                          DB  43, 43, 43, 43, 43, 115, 185, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 21, 30, 24, 24, 187, 43, 43, 43, 43, 43, 186, 16, 16, 16, 178, 178, 42, 42
	                          DB  42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 16, 18, 27, 27, 18, 16, 187, 187, 187, 16, 16, 178, 178, 106, 128, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42
	                          DB  42, 42, 42, 42, 6, 185, 16, 16, 31, 24, 20, 20, 20, 21, 16, 128, 128, 201, 17, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                          DB  42, 16, 16, 16, 106, 16, 43, 43, 43, 116, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 16, 128, 128, 201, 188, 43, 16, 16, 187
	                          DB  186, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 106, 17, 17, 16, 43, 186, 42, 42,43, 187, 178, 42, 42, 42, 42, 40, 40, 42
	                          DB  40, 40, 40, 42, 42, 42, 42, 42, 16, 178, 128, 128, 16, 116, 43, 43, 43, 43, 43, 43, 43, 43, 187, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 201
	                          DB  16, 16, 16, 43, 43, 43, 43, 43, 16, 6, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 114, 6, 43, 43, 43, 43, 43, 43, 43, 6, 43
	                          DB  17, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 17, 43, 43, 43, 43, 43, 43, 116, 116, 16, 187, 42, 43, 43, 43, 43, 178, 42, 42, 42
	                          DB  42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 16, 43, 43, 43, 43, 43, 43, 43, 43, 17, 116, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42
	                          DB  42, 42, 114, 28, 22, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 186, 16, 17, 17, 20, 17
	                          DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 24, 16, 16, 186, 43, 43, 43, 43, 43, 43
	                          DB  178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 114, 114, 16, 17, 106, 106, 106, 16, 42, 43, 43, 43, 43, 178, 42, 42, 42, 42, 40, 40, 42, 40
	                          DB  40, 40, 42, 42, 42, 42, 42, 17, 43, 43, 43, 43, 16, 43, 43, 43, 106, 17, 17, 17, 16, 115, 186, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 43, 43
	                          DB  43, 43, 43, 116, 17, 17, 42, 16, 106, 28, 28, 23, 16, 114, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 185, 43,43, 43, 43, 43, 43, 43, 43, 17, 115, 128
	                          DB  114, 114, 16, 16, 114, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 21, 43, 43, 43, 43, 43, 43, 17, 17, 43, 43, 18, 186, 186, 186, 186, 186, 42, 42, 42, 42
	                          DB  40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 24, 43, 43, 43, 43, 43, 43, 16, 16, 116, 43, 17, 17, 17, 17, 17, 17, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42
	                          DB  42, 24, 43, 43, 43, 43, 17, 116, 17, 17, 116, 43, 17, 128, 128, 128, 128, 128, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 24, 43, 43, 43, 43, 43, 43, 43
	                          DB  43, 43, 16, 16, 16, 16, 16, 16, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 24, 43, 43, 43, 43, 43, 43, 43, 43, 43, 116, 116, 116, 116, 116, 186, 178
	                          DB  42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 24, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 187, 178, 42, 42, 42, 42, 40, 40, 42, 40, 40
	                          DB  40, 42, 42, 42, 42, 24, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 24, 43, 43, 43
	                          DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 114, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 24, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                          DB  16, 16, 16, 114, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42, 27, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 20, 6, 42, 42, 42, 42, 40
	                          DB  40, 42, 40, 40, 40, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 42, 42, 42, 42
	                          DB  42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 40, 40, 42, 40, 40, 40, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42
	                          DB  42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 16, 40, 40, 16, 16, 16, 16, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40
	                          DB  40, 40, 40, 16, 16, 16, 16, 16, 16, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 16, 16, 16, 16

	;objects drawing (must be square)
	object                    db  1,1,1,1,14,14,1,1,1,1
	                          db  1,1,14,14,14,14,14,14,1,1
	                          db  1,14,14,14,14,14,14,14,14,1
	                          db  1,14,14,14,14,14,14,1,1,1
	                          db  14,14,14,14,14,1,1,1,1,1
	                          db  14,14,14,14,14,1,1,1,1,1
	                          db  1,14,14,14,14,14,14,1,1,1
	                          db  1,14,14,14,14,14,14,14,14,1
	                          db  1,1,14,14,14,14,14,14,1,1
	                          db  1,1,1,1,14,14,1,1,1,1
	object_size               dw  10
	object_start_x            dw  0
	object_start_y            dw  70
	p2_winx                   dw  0
	p2_winy                   dw  70
	object2                   db  1,1,1,1,5,5,1,1,1,1
	                          db  1,1,5,5,5,5,5,5,1,1
	                          db  1,5,5,5,5,5,5,5,5,1
	                          db  1,1,1,5,5,5,5,5,5,1
	                          db  1,1,1,1,1,5,5,5,5,5
	                          db  1,1,1,1,1,5,5,5,5,5
	                          db  1,1,1,5,5,5,5,5,5,1
	                          db  1,5,5,5,5,5,5,5,5,1
	                          db  1,1,5,5,5,5,5,5,1,1
	                          db  1,1,1,1,5,5,1,1,1,1
				   
	               
	object2_size              dw  10
	object2_start_x           dw  250
	object2_start_y           dw  70
	p1_winx                   dw  250
	p1_winy                   dw  70
	;just to delete object from its revious place (has color of background) x the number of pixels (size^2)
	
	object2_reverse           db  100 dup(0)

	;just to delete object from its revious place (has color of background) x the number of pixels (size^2)
	object_reverse            db  100 dup(0)
	;------------------------------------------------------------------------NewStart
	gohst1                    db  1,1,1,15,15,15,15,1,1,1
	                          db  1,1,15,15,15,15,15,15,1,1
	                          db  1,15,1,1,15,15,1,1,15,1
	                          db  1,15,15,15,15,15,15,15,15,1
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,1,15,15,15,15,1,15,15
	                          db  15,1,1,1,15,15,1,1,1,15
	gohst1_size               dw  10
	gohst1_start_x            dw  120
	gohst1_start_y            dw  30
	;just to delete object from its revious place (has color of background) x the number of pixels (size^2)
	gohst1_reverse            db  100 dup(0)
	;------------------------------------------------------------------------NewEnd
	;------------------------------------------------------------------------NewStart
	gohst2                    db  1,1,1,15,15,15,15,1,1,1
	                          db  1,1,15,15,15,15,15,15,1,1
	                          db  1,15,1,1,15,15,1,1,15,1
	                          db  1,15,15,15,15,15,15,15,15,1
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,1,15,15,15,15,1,15,15
	                          db  15,1,1,1,15,15,1,1,1,15
	gohst2_size               dw  10
	gohst2_start_x            dw  120
	gohst2_start_y            dw  30
	;just to delete object from its revious place (has color of background) x the number of pixels (size^2)
	gohst2_reverse            db  100 dup(0)
	;-------------------------------------------------------------------------NewStart
	gohst3                    db  1,1,1,15,15,15,15,1,1,1
	                          db  1,1,15,15,15,15,15,15,1,1
	                          db  1,15,1,1,15,15,1,1,15,1
	                          db  1,15,15,15,15,15,15,15,15,1
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,15,15,15,15,15,15,15,15
	                          db  15,15,1,15,15,15,15,1,15,15
	                          db  15,1,1,1,15,15,1,1,1,15
	gohst3_size               dw  10
	gohst3_start_x            dw  120
	gohst3_start_y            dw  100
	;just to delete object from its revious place (has color of background) x the number of pixels (size^2)
	gohst3_reverse            db  100 dup(0)
	;-------------------------------------------------------------------------NewEnd
	;--------------------------------------( powers up objects )----------------------------------------

	object_freeze_ghosts      db  1,1,1,1,12,12,1,1,1,1
	                          db  1,1,1,12,12,12,12,1,1,1
	                          db  1,1,12,12,12,12,12,12,1,1
	                          db  1,12,12,12,12,12,12,12,12,1
	                          db  12,12,12,12,4,4,12,12,12,12
	                          db  12,12,12,12,4,4,12,12,12,12
	                          db  1,12,12,12,12,12,12,12,12,1
	                          db  1,1,12,12,12,12,12,12,1,1
	                          db  1,1,1,12,12,12,12,1,1,1
	                          db  1,1,1,1,12,12,1,1,1,1
	freeze_ghosts_size        dw  10
	freeze_ghosts_startX      dw  100
	freeze_ghosts_startY      dw  10
	freeze_ghosts_reverse     db  100 dup(0)
	;------------------------------------------
	object_start_beginning    db  1,1,1,1,10,10,1,1,1,1
	                          db  1,1,1,10,10,10,10,1,1,1
	                          db  1,1,10,10,10,10,10,10,1,1
	                          db  1,10,10,10,10,10,10,10,10,1
	                          db  10,10,10,10,4,4,10,10,10,10
	                          db  10,10,10,10,4,4,10,10,10,10
	                          db  1,10,10,10,10,10,10,10,10,1
	                          db  1,1,10,10,10,10,10,10,1,1
	                          db  1,1,1,10,10,10,10,1,1,1
	                          db  1,1,1,1,10,10,1,1,1,1
                             
	start_beginning_size      dw  10
	start_beginning_startX    dw  125
	start_beginning_startY    dw  70
	srt_begin_reverse         db  100 dup(0)
	;---------------------------------------
	object_freeze_player      db  1,1,1,1,3,3,1,1,1,1
	                          db  1,1,3,3,3,3,3,3,1,1
	                          db  1,3,3,3,3,3,3,3,3,1
	                          db  1,3,3,3,3,3,3,3,3,1
	                          db  3,3,3,3,4,4,3,3,3,3
	                          db  3,3,3,3,4,4,3,3,3,3
	                          db  1,3,3,3,3,3,3,3,3,1
	                          db  1,3,3,3,3,3,3,3,3,1
	                          db  1,1,3,3,3,3,3,3,1,1
	                          db  1,1,1,1,3,3,1,1,1,1
	freeze_player_size        dw  10
	freeze_player_startX      dw  150
	freeze_player_startY      dw  10
	freeze_player_reverse     db  100 dup(0)
	;---------------------------------------------------
	object_Invisible          db  1,1,1,1,8,8,1,1,1,1
	                          db  1,1,1,8,8,8,8,1,1,1
	                          db  1,1,8,8,8,8,8,8,1,1
	                          db  1,8,8,8,8,8,8,8,8,1
	                          db  8,8,8,8,4,4,8,8,8,8
	                          db  8,8,8,8,4,4,8,8,8,8
	                          db  1,8,8,8,8,8,8,8,8,1
	                          db  1,1,8,8,8,8,8,8,1,1
	                          db  1,1,1,8,8,8,8,1,1,1
	                          db  1,1,1,1,8,8,1,1,1,1

	Invisible_size            dw  10
	Invisible_startX          dw  120
	Invisible_startY          dw  130
	Invisible_reverse         db  100 dup(0)

	;-----------------------------------------------------
	object_Random             db  1,1,1,1,5,5,1,1,1,1
	                          db  1,1,5,5,5,5,5,5,1,1
	                          db  1,5,5,5,5,5,5,5,5,1
	                          db  1,5,5,5,5,5,5,5,5,1
	                          db  5,5,5,5,4,4,5,5,5,5
	                          db  5,5,5,5,4,4,5,5,5,5
	                          db  1,5,5,5,5,5,5,5,5,1
	                          db  1,5,5,5,5,5,5,5,5,1
	                          db  1,1,5,5,5,5,5,5,1,1
	                          db  1,1,1,1,5,5,1,1,1,1

	Random_size               dw  10
	Random_startX             dw  80
	Random_startY             dw  100
	Random_reverse            db  100 dup(0)
	;--------------------------------------------------------
	;--------------------------------------------------
	object_startU_beginning   db  1,1,1,1,10,10,1,1,1,1
	                          db  1,1,1,10,10,10,10,1,1,1
	                          db  1,1,10,10,10,10,10,10,1,1
	                          db  1,10,10,10,10,10,10,10,10,1
	                          db  10,10,10,10,4,4,10,10,10,10
	                          db  10,10,10,10,4,4,10,10,10,10
	                          db  1,10,10,10,10,10,10,10,10,1
	                          db  1,1,10,10,10,10,10,10,1,1
	                          db  1,1,1,10,10,10,10,1,1,1
	                          db  1,1,1,1,10,10,1,1,1,1
                             
	startU_beginning_size     dw  10
	startU_beginning_startX   dw  200
	startU_beginning_startY   dw  10
	srtU_begin_reverse        db  100 dup(0)
	;---------------------------------------------------------
	object_freeze_you         db  1,1,1,1,3,3,1,1,1,1
	                          db  1,1,3,3,3,3,3,3,1,1
	                          db  1,3,3,3,3,3,3,3,3,1
	                          db  1,3,3,3,3,3,3,3,3,1
	                          db  3,3,3,3,4,4,3,3,3,3
	                          db  3,3,3,3,4,4,3,3,3,3
	                          db  1,3,3,3,3,3,3,3,3,1
	                          db  1,3,3,3,3,3,3,3,3,1
	                          db  1,1,3,3,3,3,3,3,1,1
	                          db  1,1,1,1,3,3,1,1,1,1
	freeze_you_size           dw  10
	freeze_you_startX         dw  170
	freeze_you_startY         dw  90
	freeze_you_reverse        db  100 dup(0)
	;--------------------------------------------------------------
	object_NotInvisible       db  1,1,1,1,8,8,1,1,1,1
	                          db  1,1,1,8,8,8,8,1,1,1
	                          db  1,1,8,8,8,8,8,8,1,1
	                          db  1,8,8,8,8,8,8,8,8,1
	                          db  8,8,8,8,4,4,8,8,8,8
	                          db  8,8,8,8,4,4,8,8,8,8
	                          db  1,8,8,8,8,8,8,8,8,1
	                          db  1,1,8,8,8,8,8,8,1,1
	                          db  1,1,1,8,8,8,8,1,1,1
	                          db  1,1,1,1,8,8,1,1,1,1

	NotInvisible_size         dw  10
	NotInvisible_startX       dw  90
	NotInvisible_startY       dw  60
	NotInvisible_reverse      db  100 dup(0)

	;-------------------------------------------------------
	;----------------------------------(some booleans)------------------------------
	srt_begin                 db  0
	srtU_begin                db  0                                                                                                                                                                               	;;; new
	frz_ghosts                db  0
	frz_player                db  0
	frzU_player               db  0                                                                                                                                                                               	;; new
	Invisible                 db  0
	NotInvisible              db  0                                                                                                                                                                               	; new
	Random                    db  0
	Invisible_p1              db  0
	Invisible_p2              db  0
	;---------------------------------(some counters)--------------------------
	counter_p1                dw  0
	counter_p2                dw  0
	counter_ghosts            dw  0
	;---------------------------------------------------------------------------------------------------------

	;------------------------------------------------------------------------NewEnd
	mymatrix                  db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1
	                          db  1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1
	                          db  1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1
	                          db  1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1
	                          db  1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1
	                          db  1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,1
	                          db  0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0
	                          db  1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1
	                          db  1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1
	                          db  1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,1
	                          db  1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1
	                          db  1,0,1,0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1
	                          db  1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	;--------------------------------------------------------------------------Newstart
	gmatrix                   db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1
	                          db  1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1
	                          db  1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1
	                          db  1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1
	                          db  1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1
	                          db  1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,1
	                          db  1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1
	                          db  1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1
	                          db  1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1
	                          db  1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,1
	                          db  1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1
	                          db  1,0,1,0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1
	                          db  1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	;-----------------------------------------------------------------------NewEnd
	prevent_up                db  0
	prevent_right             db  0
	prevent_down              db  0
	prevent_left              db  0


	;some keys scancode
	up                        db  72
	down                      db  80
	right                     db  77
	left                      db  75
	escape                    db  01
	a                         db  30
	w                         db  17
	s                         db  31
	d                         db  32
    	
	
	ghost2Seed                db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	                          db  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	                          db  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	gohst2c                   dw  0
	gohst3c                   dw  0
	gohst1c                   dw  29999

	p1_lost                   db  "PLAYER2 YOU WON THE GAME$"
	P2_lost                   db  "PLAYER1 YOU WON THE GAME$"
	bothlost                  db  "GAME OVER$"
	level                     db  0
	firsttime                 db  0
	empty                  db  40 dup(' '),'$'
.CODE

	;description
Clear_status_bar_text_mode PROC
	
	; set cursor
	                           mov            ah,2
	                           mov            dl,0                                	;x coordinates
	                           mov            dh,23                               	;y coordinates
	                           int            10h

	;print Get_Name_msg
	                           mov            ah, 9
	                           mov            dx, offset STATUS_BAR_CLEAR
	                           int            21h
	; set cursor
	                           mov            ah,2
	                           mov            dl,0                                	;x coordinates
	                           mov            dh,24                               	;y coordinates
	                           int            10h

	;print Get_Name_msg
	                           mov            ah, 9
	                           mov            dx, offset STATUS_BAR_CLEAR
	                           int            21h
	                           ret
Clear_status_bar_text_mode ENDP


GET_Name PROC
	;clear screen
	                           mov            ax,0600h
	                           mov            bh,0
	                           mov            cx,0
	                           mov            dx,184FH
	                           int            10h

	;text mode
	                           mov            ah,0
	                           mov            al,2h
	                           int            10h

	; set cursor
	                           mov            ah,2
	                           mov            dl,20                               	;x coordinates
	                           mov            dh,10                               	;y coordinates
	                           int            10h

	;print Get_Name_msg
	                           mov            ah, 9
	                           mov            dx, offset Get_Name_msg
	                           int            21h

	; set cursor
	                           mov            ah,2
	                           mov            dl,20                               	;x coordinates
	                           mov            dh,14                               	;y coordinates
	                           int            10h

	;print Press Enter
	                           mov            ah, 9
	                           mov            dx, offset Press_Enter
	                           int            21h

	; set cursor
	                           mov            ah,2
	                           mov            dl,25                               	;x coordinates
	                           mov            dh,12                               	;y coordinates
	                           int            10h


	;read from keyboard
	                           mov            ah,0AH
	                           mov            dx,offset Name1
	                           int            21h

	                           CALL           Clear_status_bar_text_mode

	; set cursor
	                           mov            ah,2
	                           mov            dl,0                                	;x coordinates
	                           mov            dh,23                               	;y coordinates
	                           int            10h

	;print Get_Name_msg
	                           mov            ah, 9
	                           mov            dx, offset Waiting_connection_Status
	                           int            21h


	dummy_loop:                
	                           MOV            DX , 3FDH                           	;LINE STATUS REGISTER
	                           IN             AL , DX                             	;READ LINE STATUS
	                           TEST           AL , 00100000B
	                           JZ             dummy_loop
	                           MOV            DX , 3F8H                           	; TRANSMIT DATA REGISTER
	                           MOV            AL,32
	                           OUT            DX , AL
							   

	                           lea            ax,name1
	                           mov            si,ax
	                           add            si,2
	                           lea            ax,name2
	                           mov            bx,ax
	                           mov            cx,0
	Name_RECEIVE:              
	                           MOV            DX , 3FDH                           	; LINE STATUS REGISTER
	                           IN             AL , DX
	                           TEST           AL , 1
	                           JZ             Name_RECEIVE                        	;NOT READY
	                           MOV            DX , 03F8H                          	; RECEIVE REGISTER
	                           IN             AL , DX
	                           MOV            [bx] , AL                           	; STORE THE VALUE RECEIVED IN THE VARIABLE
	                           inc            bx
	                           inc            cx
	                           cmp            cx,28
	                           je             rettt

	Name_Send:                 

	                           MOV            DX , 3FDH                           	;LINE STATUS REGISTER
	                           IN             AL , DX                             	;READ LINE STATUS
	                           TEST           AL , 00100000B
	                           JZ             Name_Send
	                           MOV            DX , 3F8H                           	; TRANSMIT DATA REGISTER
	                           MOV            AL,[si]
	                           inc            si
	                           OUT            DX , AL
	                           jmp            Name_RECEIVE

	rettt:                     
	                           ret
GET_Name ENDP

emptysatusbar proc
	                           mov            cx,40
	                           lea            si,empty
	                           mov            dh, 24                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	w222:                      
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0ah                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           w222
	                           ret
emptysatusbar endp
	;-------------------------------------------------------
updatesatusbar proc
	; mov            cx,13
	; lea            si,GohstsFrozen
	                           mov            dh, 24                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	w223:                      
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0ah                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           w223

	                           ret
updatesatusbar endp




PRINT_MAIN_MENU PROC
	;clear screen
	                           mov            ax,0600h
	                           mov            bh,0
	                           mov            cx,0
	                           mov            dx,184FH
	                           int            10h

	;text mode
	                           mov            ah,0
	                           mov            al,2h
	                           int            10h

	; set cursor
	                           mov            ah,2
	                           mov            dl,25                               	;x coordinates
	                           mov            dh,10                               	;y coordinates
	                           int            10h

	;print Get_Name_msg
	                           mov            ah, 9
	                           mov            dx, offset CHATTING_OPTION
	                           int            21h

	; set cursor
	                           mov            ah,2
	                           mov            dl,25                               	;x coordinates
	                           mov            dh,12                               	;y coordinates
	                           int            10h

	;print Press Enter
	                           mov            ah, 9
	                           mov            dx, offset GAMING_OPTION
	                           int            21h

	; set cursor
	                           mov            ah,2
	                           mov            dl,25                               	;x coordinates
	                           mov            dh,14                               	;y coordinates
	                           int            10h

	;print Press Enter
	                           mov            ah, 9
	                           mov            dx, offset EXIT_OPTION
	                           int            21h

	; set cursor
	                           mov            ah,2
	                           mov            dl,0                                	;x coordinates
	                           mov            dh,21                               	;y coordinates
	                           int            10h

	;print Press Enter
	                           mov            ah, 9
	                           mov            dx, offset STATUS_BAR_SEPRATOR
	                           int            21h

	;NO CURSOR
	                           mov            ah, 1
	                           mov            cx, 2607h
	                           int            10h
	                           ret
PRINT_MAIN_MENU ENDP

PRINT_Level_MENU PROC
	;clear screen
	                           mov            ax,0600h
	                           mov            bh,0
	                           mov            cx,0
	                           mov            dx,184FH
	                           int            10h

	;text mode
	                           mov            ah,0
	                           mov            al,2h
	                           int            10h

	; set cursor
	                           mov            ah,2
	                           mov            dl,25                               	;x coordinates
	                           mov            dh,10                               	;y coordinates
	                           int            10h

	;print Get_Name_msg
	                           mov            ah, 9
	                           mov            dx, offset Level_1
	                           int            21h

	; set cursor
	                           mov            ah,2
	                           mov            dl,25                               	;x coordinates
	                           mov            dh,12                               	;y coordinates
	                           int            10h

	;print Press Enter
	                           mov            ah, 9
	                           mov            dx, offset Level_2
	                           int            21h

	; set cursor
	                           mov            ah,2
	                           mov            dl,25                               	;x coordinates
	                           mov            dh,14                               	;y coordinates
	                           int            10h

	;print Press Enter
	                           mov            ah, 9
	                           mov            dx, offset EXIT_OPTION
	                           int            21h

	; set cursor
	                           mov            ah,2
	                           mov            dl,0                                	;x coordinates
	                           mov            dh,21                               	;y coordinates
	                           int            10h

	;print Press Enter
	                           mov            ah, 9
	                           mov            dx, offset STATUS_BAR_SEPRATOR
	                           int            21h

	;NO CURSOR
	                           mov            ah, 1
	                           mov            cx, 2607h
	                           int            10h
	                           ret
PRINT_Level_MENU ENDP

	;any square object drawing function
	;SI: OFFSET OF DATA TO BE DRAWN
	;BX: SIZE OF THE OBJECT TO BE DRAWN
	;CX: START_POS_X
	;DX: START_POS_Y
DRAW_OBJECT PROC
	                           PUSH           AX
	                           PUSH           BX
	                           PUSH           CX
	                           PUSH           DX
	                           PUSH           SI
	                           PUSH           DI
	                           PUSH           BP

	;ADD THE SIZE TO THE STAARTING X AND Y OF THE OBJECT
	                           MOV            BP, BX
	                           ADD            BX, CX
	                           ADD            BP, DX
    
	;STORE THE START X POS
	                           MOV            DI, CX
    
	;LEA SI, ORANGE

	CUR_DRW_ROW:               

	CUR_DRW_COL:               
            
	;MOVES THE COLOR FROM DS:SI TO AL
	                           LODSB
	                           MOV            AH,0CH
	;IF THE PIXEL IS BLACK DON'T DRAW BLACK = TRANSPARENT
	                           CMP            AL ,1
	                           JE             SKIP_DRAW
	                           INT            10H
	SKIP_DRAW:                 
	                           INC            CX
	                           CMP            CX, BX
	                           JNE            CUR_DRW_COL
	;RETURN CX TO THE BEGINNING OF THE NEXT ROW
	                           MOV            CX,DI
	                           INC            DX
	                           CMP            DX,BP
	                           JNE            CUR_DRW_ROW
    
	                           POP            BP
	                           POP            DI
	                           POP            SI
	                           POP            DX
	                           POP            CX
	                           POP            BX
	                           POP            AX
	                           RET
DRAW_OBJECT ENDP

Draw_Maze PROC
	                           PUSH           AX
	                           PUSH           BX
	                           PUSH           CX
	                           PUSH           DX
	                           PUSH           SI
	                           PUSH           DI
	                           PUSH           BP
	                           rectangle_draw 1,0,260,0,10
	                           rectangle_draw 1,0,260,140,150
	                           rectangle_draw 1,0,10,10,70
	                           rectangle_draw 1,0,10,80,140
	                           rectangle_draw 1,250,260,10,70
	                           rectangle_draw 1,250,260,80,140
	;blocks
	                           rectangle_draw 6,40,50,10,30
	                           rectangle_draw 6,20,30,20,60
	                           rectangle_draw 6,30,50,40,50
	                           rectangle_draw 6,20,40,70,80
	                           rectangle_draw 6,40,50,60,90
	                           rectangle_draw 6,20,30,80,90
	                           rectangle_draw 6,20,30,100,140
	                           rectangle_draw 6,60,70,20,30
	                           rectangle_draw 6,60,70,40,50
	                           rectangle_draw 6,60,70,60,80
	                           rectangle_draw 6,70,90,70,80
	                           rectangle_draw 6,60,70,90,130
	                           rectangle_draw 6,40,60,100,110
	                           rectangle_draw 6,70,90,110,120
	                           rectangle_draw 6,40,50,120,130
	                           rectangle_draw 6,80,90,20,60
	                           rectangle_draw 6,80,90,90,100
	                           rectangle_draw 6,80,110,130,140
	                           rectangle_draw 6,100,150,110,120
	                           rectangle_draw 6,120,160,120,130
	                           rectangle_draw 6,110,120,10,30
	                           rectangle_draw 6,100,110,20,30
	                           rectangle_draw 6,130,140,10,30
	                           rectangle_draw 6,140,150,20,30
	                           rectangle_draw 6,100,140,40,50
	                           rectangle_draw 6,150,160,40,60
	;   rectangle_draw 6,100,160,60,100
	;   rectangle_draw 0,110,150,70,90
	;   rectangle_draw 0,120,140,60,70
	                           rectangle_draw 6,100,110,60,90
	                           rectangle_draw 6,150,160,60,90
	                           rectangle_draw 6,100,160,90,100
	                           rectangle_draw 6,100,120,60,70
	                           rectangle_draw 6,140,160,60,70

	                           rectangle_draw 6,160,170,90,110
	                           rectangle_draw 6,160,180,20,30
	                           rectangle_draw 6,170,180,30,60
	                           rectangle_draw 6,180,200,40,50
	                           rectangle_draw 6,190,200,10,30
	                           rectangle_draw 6,210,220,20,30
	                           rectangle_draw 6,210,220,40,50
	                           rectangle_draw 6,230,240,20,60
	                           rectangle_draw 6,210,220,60,80
	                           rectangle_draw 6,220,240,70,80
	                           rectangle_draw 6,230,240,90,100
	                           rectangle_draw 6,220,240,110,120
	                           rectangle_draw 6,230,250,130,140
	                           rectangle_draw 6,210,220,90,130
	                           rectangle_draw 6,180,210,100,110
	                           rectangle_draw 6,170,180,120,140
	                           rectangle_draw 6,180,200,120,130
	                           rectangle_draw 6,190,200,60,70
	                           rectangle_draw 6,180,200,80,90
	                           rectangle_draw 6,170,190,70,80
	                           POP            BP
	                           POP            DI
	                           POP            SI
	                           POP            DX
	                           POP            CX
	                           POP            BX
	                           POP            AX
	                           RET
Draw_Maze ENDP

	;remove the moved object from its previous position
Draw_first_object_reverse PROC
	                           PUSH           AX
	                           PUSH           BX
	                           PUSH           CX
	                           PUSH           DX
	                           PUSH           SI
	                           PUSH           DI
	                           PUSH           BP
	                           lea            si,object_reverse
	                           mov            bx,object_size
	                           mov            cx,object_start_x
	                           mov            dx,object_start_y
	                           call           DRAW_OBJECT
	                           POP            BP
	                           POP            DI
	                           POP            SI
	                           POP            DX
	                           POP            CX
	                           POP            BX
	                           POP            AX
	                           RET
Draw_first_object_reverse ENDP
	;----------------------------------------------------------------------NewStart
Draw_first_gohst1_reverse PROC
	                           PUSH           AX
	                           PUSH           BX
	                           PUSH           CX
	                           PUSH           DX
	                           PUSH           SI
	                           PUSH           DI
	                           PUSH           BP
	                           lea            si,gohst1_reverse
	                           mov            bx,gohst1_size
	                           mov            cx,gohst1_start_x
	                           mov            dx,gohst1_start_y
	                           call           DRAW_OBJECT
	                           POP            BP
	                           POP            DI
	                           POP            SI
	                           POP            DX
	                           POP            CX
	                           POP            BX
	                           POP            AX
	                           RET
Draw_first_gohst1_reverse ENDP
	;----------------------------------------------------------------------NewEnd
	;----------------------------------------------------------------------NewStart
Draw_second_gohst_reverse PROC
	                           PUSH           AX
	                           PUSH           BX
	                           PUSH           CX
	                           PUSH           DX
	                           PUSH           SI
	                           PUSH           DI
	                           PUSH           BP
	                           lea            si,gohst2_reverse
	                           mov            bx,gohst2_size
	                           mov            cx,gohst2_start_x
	                           mov            dx,gohst2_start_y
	                           call           DRAW_OBJECT
	                           POP            BP
	                           POP            DI
	                           POP            SI
	                           POP            DX
	                           POP            CX
	                           POP            BX
	                           POP            AX
	                           RET
Draw_second_gohst_reverse ENDP
	;----------------------------------------------------------------------NewEnd
Draw_second_object_reverse PROC
	                           PUSH           AX
	                           PUSH           BX
	                           PUSH           CX
	                           PUSH           DX
	                           PUSH           SI
	                           PUSH           DI
	                           PUSH           BP
	                           lea            si,object2_reverse
	                           mov            bx,object2_size
	                           mov            cx,object2_start_x
	                           mov            dx,object2_start_y
	                           call           DRAW_OBJECT
	                           POP            BP
	                           POP            DI
	                           POP            SI
	                           POP            DX
	                           POP            CX
	                           POP            BX
	                           POP            AX
	                           RET
Draw_second_object_reverse ENDP
	;------------------------------------------------------------
Draw_third_gohst_reverse PROC
	                           PUSH           AX
	                           PUSH           BX
	                           PUSH           CX
	                           PUSH           DX
	                           PUSH           SI
	                           PUSH           DI
	                           PUSH           BP
	                           lea            si,gohst3_reverse
	                           mov            bx,gohst3_size
	                           mov            cx,gohst3_start_x
	                           mov            dx,gohst3_start_y
	                           call           DRAW_OBJECT
	                           POP            BP
	                           POP            DI
	                           POP            SI
	                           POP            DX
	                           POP            CX
	                           POP            BX
	                           POP            AX
	                           RET
Draw_third_gohst_reverse ENDP

	;-----------------------------------------------------------
	;check if both objects touch
	; ax = 1 -> touching , ax = 0 -> not
	;--------------------------------------------I think it needs some editing
check_touchig PROC
	; mov ax,object1_size
	; mov bx,object1_x
	; mov cx,object1_y
	; mov dx,object2_size
	; mov bp,object2_x
	; mov di,object2_y
	                           add            bx,ax
	                           cmp            bx,bp
	                           jb             fine                                	;right of first smaller than left of second
	                           sub            bx,ax
	                           add            bp,dx
	                           cmp            bx,bp
	                           ja             fine                                	;left of first greater than right of second
	                           sub            bp,dx
	                           add            cx,ax
	                           cmp            cx,di
	                           jb             fine                                	;bottom of first above top of second
	                           sub            cx,ax
	                           add            di,dx
	                           cmp            cx,di
	                           ja             fine                                	;top of first below bottom of second
	                           mov            ax,1
	                           jmp            not_fine
	fine:                      
	                           mov            ax,0
	                           jmp            checked
	not_fine:                  mov            ax , 1
	checked:                   ret
check_touchig ENDP


check_up PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,object_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,object_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_1
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_1
	                           mov            ax ,object_start_x
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,object_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_1:                  mov            prevent_up,bl
	                           ret
check_up ENDP
	;----------------------------------------NewStart
gohst1_check_up PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst1_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst1_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_11
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_11
	                           mov            ax ,gohst1_start_x
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst1_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_11:                 mov            prevent_up,bl
	                           ret
gohst1_check_up ENDP
	;----------------------------------------NewEnd
	;----------------------------------------NewStart
gohst2_check_up PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst2_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst2_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_111
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_111
	                           mov            ax ,gohst2_start_x
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst2_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_111:                mov            prevent_up,bl
	                           ret
gohst2_check_up ENDP
	;----------------------------------------NewEnd
check_right PROC                                                              		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,object_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2
	                           mov            bh,al
	                           mov            ax,object_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_2
							  	                         
	                           mov            ax ,object_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2
	                           mov            bh,al
	                           mov            ax,object_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]

	return_2:                  mov            prevent_right,bl
	                           ret
check_right ENDP
	;---------------------------------------------------------------------------NewStart
gohst1_check_right PROC                                                       		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst1_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_22
	                           mov            bh,al
	                           mov            ax,gohst1_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_22
							  	                         
	                           mov            ax ,gohst1_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_22
	                           mov            bh,al
	                           mov            ax,gohst1_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]

	return_22:                 mov            prevent_right,bl
	                           ret
gohst1_check_right ENDP

	;---------------------------------------------------------------------------NewEnd
	;---------------------------------------------------------------------------NewStart
gohst2_check_right PROC                                                       		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst2_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_222
	                           mov            bh,al
	                           mov            ax,gohst2_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_222
							  	                         
	                           mov            ax ,gohst2_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_222
	                           mov            bh,al
	                           mov            ax,gohst2_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]

	return_222:                mov            prevent_right,bl
	                           ret
gohst2_check_right ENDP
	;---------------------------------------------------------------------------NewEnd
check_down PROC                                                               		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,object_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,object_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_3
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_3

	                           mov            ax ,object_start_x
	                           add            ax ,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,object_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_3
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_3:                  mov            prevent_down,bl
	                           ret
check_down ENDP
	;--------------------------------------------------------NewStart
gohst1_check_down PROC                                                        		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst1_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst1_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_33
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_33

	                           mov            ax ,gohst1_start_x
	                           add            ax ,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst1_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_33
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_33:                 mov            prevent_down,bl
	                           ret
gohst1_check_down ENDP
	;--------------------------------------------------------NewEnd
	;--------------------------------------------------------NewStart
gohst2_check_down PROC                                                        		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst2_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst2_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_333
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_333

	                           mov            ax ,gohst2_start_x
	                           add            ax ,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst2_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_333
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_333:                mov            prevent_down,bl
	                           ret
gohst2_check_down ENDP
	;--------------------------------------------------------Newend
check_left PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,object_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_4
	                           mov            bh,al
	                           mov            ax,object_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]


	                           cmp            bl,1
	                           je             return_4

	                           mov            ax ,object_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_4
	                           mov            bh,al
	                           mov            ax,object_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_4:                  mov            prevent_left,bl
	                           ret
check_left ENDP
	;---------------------------------------------NewStart
gohst1_check_left PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst1_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_44
	                           mov            bh,al
	                           mov            ax,gohst1_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]


	                           cmp            bl,1
	                           je             return_44

	                           mov            ax ,gohst1_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_44
	                           mov            bh,al
	                           mov            ax,gohst1_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_44:                 mov            prevent_left,bl
	                           ret
gohst1_check_left ENDP
	;---------------------------------------------NewEnd
	;---------------------------------------------NewStart
gohst2_check_left PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst2_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_444
	                           mov            bh,al
	                           mov            ax,gohst2_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]


	                           cmp            bl,1
	                           je             return_444

	                           mov            ax ,gohst2_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_444
	                           mov            bh,al
	                           mov            ax,gohst2_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_444:                mov            prevent_left,bl
	                           ret
gohst2_check_left ENDP
	;---------------------------------------------NewENd
check_up2 PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,object2_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,object2_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2_1
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_2_1
	                           mov            ax ,object2_start_x
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,object2_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_2_1:                mov            prevent_up,bl
	                           ret
check_up2 ENDP


check_right2 PROC                                                             		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,object2_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2_2
	                           mov            bh,al
	                           mov            ax,object2_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_2_2
							  	                         
	                           mov            ax ,object2_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2_2
	                           mov            bh,al
	                           mov            ax,object2_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]

	return_2_2:                mov            prevent_right,bl
	                           ret
check_right2 ENDP


check_down2 PROC                                                              		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,object2_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,object2_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2_3
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_2_3

	                           mov            ax ,object2_start_x
	                           add            ax ,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,object2_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2_3
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_2_3:                mov            prevent_down,bl
	                           ret
check_down2 ENDP

	
check_left2 PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,object2_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2_4
	                           mov            bh,al
	                           mov            ax,object2_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]


	                           cmp            bl,1
	                           je             return_2_4

	                           mov            ax ,object2_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_2_4
	                           mov            bh,al
	                           mov            ax,object2_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_2_4:                mov            prevent_left,bl
	                           ret
check_left2 ENDP
	;--------------------------------------------NewStrart
gohst3_check_up PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst3_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst3_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_234
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_234
	                           mov            ax ,gohst3_start_x
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst3_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_234:                mov            prevent_up,bl
	                           ret
gohst3_check_up ENDP
	;-------------------------------------------NewEnd
	;-------------------------------------------NewStart
gohst3_check_left PROC
	;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst3_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_445
	                           mov            bh,al
	                           mov            ax,gohst3_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]


	                           cmp            bl,1
	                           je             return_445

	                           mov            ax ,gohst3_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_445
	                           mov            bh,al
	                           mov            ax,gohst3_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           sub            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_445:                mov            prevent_left,bl
	                           ret
gohst3_check_left ENDP

	;-------------------------------------------NewEnd
	;-------------------------------------------NewStart
gohst3_check_down PROC                                                        		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst3_start_x
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst3_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_335
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_335

	                           mov            ax ,gohst3_start_x
	                           add            ax ,9
	                           mov            bl,10
	                           div            bl
	                           mov            bh,al
	                           mov            ax,gohst3_start_y
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_335
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,26
	                           lea            si,mymatrix
	                           add            si,ax
	                           mov            bl,[si]
	return_335:                mov            prevent_down,bl
	                           ret
gohst3_check_down ENDP

	;-------------------------------------------NewEnd
	;-------------------------------------------NewStart
gohst3_check_right PROC                                                       		;CHECKS THE MATRIX TO SEE IF WE CAN MOVE
	                           mov            ax ,gohst3_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_225
	                           mov            bh,al
	                           mov            ax,gohst3_start_y
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]
	                           cmp            bl,1
	                           je             return_225
							  	                         
	                           mov            ax ,gohst3_start_x
	                           mov            bl,10
	                           div            bl
	                           cmp            ah,0
	                           jne            return_225
	                           mov            bh,al
	                           mov            ax,gohst3_start_y
	                           add            ax,9
	                           mov            bl,10
	                           div            bl
	                           mov            bl,26
	                           imul           bl
	                           add            AL,bh
	                           add            ax,1
	                           lea            si,gmatrix
	                           add            si,ax
	                           mov            bl,[si]

	return_225:                mov            prevent_right,bl
	                           ret
gohst3_check_right ENDP

	;-------------------------------------------NewEnd
DO_MOTION PROC
	;MOVE SHAPE ACCORDING TO KEY PRESS

                                   
	                           cmp            counter_p1 , 0
	                           ja             decrement1_1
	                           jmp            continue1

	decrement1_1:              dec            counter_p1
	                           jmp            far  ptr  draw

                

	continue1:                 mov            bl,0                                	;CLEAR ALL PREVENT VARIABLES
	                           mov            prevent_up,bl
	                           mov            prevent_down,bl
	                           mov            prevent_left,bl
	                           mov            prevent_right,bl


	                           cmp            ah,up                               	;CHECK IF UP ARROW PRESSED
	                           jne            nextcmp

	                           call           check_up                            	;CHECK IF THERE IF BARRIER ABOVE
	                           cmp            prevent_up,1
	                           je             draw

	                           call           Draw_first_object_reverse           	;DRAW BLACK IN OLD PLACE
	                           mov            ax,object_start_y                   	;CHANGE COORDINATES
	                           sub            ax,1
	                           mov            object_start_y,ax
	                           jmp            draw

	nextcmp:                   
	                           cmp            ah,down
	                           jnz            nextcmp2
	                           call           check_down
	                           cmp            prevent_down,1
	                           je             draw
	                           call           Draw_first_object_reverse
	                           mov            ax,object_start_y
	                           add            ax,1
	                           mov            object_start_y,ax
	                           jmp            draw
	break1:                    jmp            rtn1
	nextcmp2:                  
	                           cmp            ah,right
	                           jnz            nextcmp3
	                           call           check_right
	                           cmp            prevent_right,1
	                           je             draw
	                           call           Draw_first_object_reverse
	                           mov            ax,object_start_x
	                           add            ax,1
	                           mov            object_start_x,ax
	                           jmp            draw
	nextcmp3:                  
	                           cmp            ah,left
	                           jnz            draw
	                           call           check_left
	                           cmp            prevent_left,1
	                           je             draw
	                           call           Draw_first_object_reverse
	                           mov            ax,object_start_x
	                           sub            ax,1
	                           mov            object_start_x,ax
	draw:                      
	;cmp            touch_ghost_p1  , 1
	;jz             rtn1
	                           lea            si,object                           	;DRAW BODY AFTER CHANGIN COORDINATES
	                           mov            bx,object_size
	                           mov            cx,object_start_x
	                           mov            dx,object_start_y
	                           call           DRAW_OBJECT
	rtn1:                      ret
DO_MOTION ENDP


	               
	;-----------------------------NewStart
DO_G1_MOTION PROC
	;MOVE SHAPE ACCORDING TO KEY PRESS
	                           cmp            counter_ghosts , 0
	                           ja             ignore_move1
	                           jmp            continue_g1
	ignore_move1:              dec            counter_ghosts
	                           jmp            far  ptr  drawg1


	continue_g1:               mov            bl,0                                	;CLEAR ALL PREVENT VARIABLES
	                           mov            prevent_up,bl
	                           mov            prevent_down,bl
	                           mov            prevent_left,bl
	                           mov            prevent_right,bl
                            
	                           mov            bx,offset ghost2Seed
	                           add            bx,29999
	                           mov            si,offset gohst1c
	                           cmp            [si],0ffffh
	                           jne            starttt
	                           mov            cx,29999
	                           mov            gohst1c,cx
							 
	starttt:                   
	                           sub            bx,[SI]
	                           mov            ah,[bx]
	                           mov            cx,gohst1c
	                           dec            cx
	                           mov            gohst1c,cx

	                           cmp            ah,3                                	;CHECK IF UP ARROW PRESSED
	                           jne            nextcmpg1
	moveup:                    
	                           call           gohst1_check_up                     	;CHECK IF THERE IF BARRIER ABOVE
	                           cmp            prevent_up,1
	                           je             moveright
	                           call           Draw_first_gohst1_reverse           	;DRAW BLACK IN OLD PLACE
	                           mov            ax,gohst1_start_y                   	;CHANGE COORDINATES
	                           sub            ax,1
	                           mov            gohst1_start_y,ax
	                           jmp            drawg1
	nextcmpg1:                 
	                           cmp            ah,2
	                           jnz            nextcmp2g1
	movedown:                  
	                           call           gohst1_check_down
	                           cmp            prevent_down,1
	                           je             moveleft
	                           call           Draw_first_gohst1_reverse
	                           mov            ax,gohst1_start_y
	                           add            ax,1
	                           mov            gohst1_start_y,ax
	                           jmp            drawg1
	nextcmp2g1:                
	                           cmp            ah,1
	                           jnz            nextcmp3g1
	moveright:                 
	                           call           gohst1_check_right
	                           cmp            prevent_right,1
	                           je             movedown
	                           call           Draw_first_gohst1_reverse
	                           mov            ax,gohst1_start_x
	                           add            ax,1
	                           mov            gohst1_start_x,ax
	                           jmp            drawg1
	nextcmp3g1:                
	                           cmp            ah,0
	                           jnz            drawg1
	moveleft:                  
	                           call           gohst1_check_left
	                           cmp            prevent_left,1
	                           je             moveup
	                           call           Draw_first_gohst1_reverse
	                           mov            ax,gohst1_start_x
	                           sub            ax,1
	                           mov            gohst1_start_x,ax
	drawg1:                    
	;call           draw_maze
	                           lea            si,gohst1                           	;DRAW BODY AFTER CHANGIN COORDINATES
	                           mov            bx,gohst1_size
	                           mov            cx,gohst1_start_x
	                           mov            dx,gohst1_start_y
	                           call           DRAW_OBJECT
	                           ret
DO_G1_MOTION ENDP
	;--------------------------------------------------------NewStart
DO_G2_MOTION PROC
	;MOVE SHAPE ACCORDING TO KEY PRESS


	                           cmp            counter_ghosts , 0
	                           ja             ignore_move2
	                           jmp            continue_g2
 
	ignore_move2:              dec            counter_ghosts
	                           jmp            drawg2

	continue_g2:               mov            bl,0                                	;CLEAR ALL PREVENT VARIABLES
	                           mov            prevent_up,bl
	                           mov            prevent_down,bl
	                           mov            prevent_left,bl
	                           mov            prevent_right,bl
                            

							 
	                           mov            bx,offset ghost2Seed
	                           mov            si,offset gohst2c
	                           cmp            [si],30000
	                           jne            starttt2
	                           mov            cx,0
	                           mov            gohst2c,cx
							 
	starttt2:                  
	                           add            bx,[SI]
	                           mov            ah,[bx]
	                           mov            cx,gohst2c
	                           inc            cx
	                           mov            gohst2c,cx

	                           cmp            ah,1                                	;CHECK IF UP ARROW PRESSED
	                           jne            nextcmpg2
	moveupg2:                  
	                           call           gohst2_check_up                     	;CHECK IF THERE IF BARRIER ABOVE
	                           cmp            prevent_up,1
	                           je             moverightg2
	                           call           Draw_second_gohst_reverse           	;DRAW BLACK IN OLD PLACE
	                           mov            ax,gohst2_start_y                   	;CHANGE COORDINATES
	                           sub            ax,1
	                           mov            gohst2_start_y,ax
	                           jmp            drawg2
	nextcmpg2:                 
	                           cmp            ah,0
	                           jnz            nextcmp2g2
	movedowng2:                
	                           call           gohst2_check_down
	                           cmp            prevent_down,1
	                           je             moveleftg2
	                           call           Draw_second_gohst_reverse
	                           mov            ax,gohst2_start_y
	                           add            ax,1
	                           mov            gohst2_start_y,ax
	                           jmp            drawg2
	nextcmp2g2:                
	                           cmp            ah,3
	                           jnz            nextcmp3g2
	moverightg2:               
	                           call           gohst2_check_right
	                           cmp            prevent_right,1
	                           je             movedowng2
	                           call           Draw_second_gohst_reverse
	                           mov            ax,gohst2_start_x
	                           add            ax,1
	                           mov            gohst2_start_x,ax
	                           jmp            drawg2
	nextcmp3g2:                
	                           cmp            ah,2
	                           jnz            drawg2
	moveleftg2:                
	                           call           gohst2_check_left
	                           cmp            prevent_left,1
	                           je             moveupg2
	                           call           Draw_second_gohst_reverse
	                           mov            ax,gohst2_start_x
	                           sub            ax,1
	                           mov            gohst2_start_x,ax
	drawg2:                    
	;call           draw_maze
	                           lea            si,gohst2                           	;DRAW BODY AFTER CHANGIN COORDINATES
	                           mov            bx,gohst2_size
	                           mov            cx,gohst2_start_x
	                           mov            dx,gohst2_start_y
	                           call           DRAW_OBJECT
	                           ret
DO_G2_MOTION ENDP
	;-------------------------------------------NewEnd
	;-------------------------------------------NewStart
DO_G3_MOTION PROC
	;MOVE SHAPE ACCORDING TO KEY PRESS
	                           mov            ah,level
	                           cmp            ah,2
	                           jne            bbbbbb


	                           cmp            counter_ghosts , 0
	                           ja             ignore_move3
	                           jmp            continue_g3
 
	ignore_move3:              dec            counter_ghosts
	                           jmp            drawg3

	continue_g3:               mov            bl,0                                	;CLEAR ALL PREVENT VARIABLES
	                           mov            prevent_up,bl
	                           mov            prevent_down,bl
	                           mov            prevent_left,bl
	                           mov            prevent_right,bl
                            

							 
	                           mov            bx,offset ghost2Seed
	                           mov            si,offset gohst3c
	                           cmp            [si],30000
	                           jne            starttt3
	                           mov            cx,0
	                           mov            gohst3c,cx
							 
	starttt3:                  
	                           add            bx,[SI]
	                           mov            ah,[bx]
	                           mov            cx,gohst3c
	                           inc            cx
	                           mov            gohst3c,cx

	                           cmp            ah,2                                	;CHECK IF UP ARROW PRESSED
	                           jne            nextcmpg3
	moveupg3:                  
	                           call           gohst3_check_up                     	;CHECK IF THERE IF BARRIER ABOVE
	                           cmp            prevent_up,1
	                           je             moverightg3
	                           call           Draw_third_gohst_reverse            	;DRAW BLACK IN OLD PLACE
	                           mov            ax,gohst3_start_y                   	;CHANGE COORDINATES
	                           sub            ax,1
	                           mov            gohst3_start_y,ax
	                           jmp            drawg3
	bbbbbb:                    jmp            rettttttt
	nextcmpg3:                 
	                           cmp            ah,1
	                           jnz            nextcmp2g3
	movedowng3:                
	                           call           gohst3_check_down
	                           cmp            prevent_down,1
	                           je             moveleftg3
	                           call           Draw_third_gohst_reverse
	                           mov            ax,gohst3_start_y
	                           add            ax,1
	                           mov            gohst3_start_y,ax
	                           jmp            drawg3
	
	nextcmp2g3:                
	                           cmp            ah,0
	                           jnz            nextcmp3g3
	moverightg3:               
	                           call           gohst3_check_right
	                           cmp            prevent_right,1
	                           je             movedowng3
	                           call           Draw_third_gohst_reverse
	                           mov            ax,gohst3_start_x
	                           add            ax,1
	                           mov            gohst3_start_x,ax
	                           jmp            drawg3
	nextcmp3g3:                
	                           cmp            ah,3
	                           jnz            drawg3
	moveleftg3:                
	                           call           gohst3_check_left
	                           cmp            prevent_left,1
	                           je             moveupg3
	                           call           Draw_third_gohst_reverse
	                           mov            ax,gohst3_start_x
	                           sub            ax,1
	                           mov            gohst3_start_x,ax
	drawg3:                    
	;call           draw_maze
	                           lea            si,gohst3                           	;DRAW BODY AFTER CHANGIN COORDINATES
	                           mov            bx,gohst3_size
	                           mov            cx,gohst3_start_x
	                           mov            dx,gohst3_start_y
	                           call           DRAW_OBJECT
	rettttttt:                 ret
DO_G3_MOTION ENDP
	;-------------------------------------------NewEnd
DO_MOTION2 PROC
	;MOVE SHAPE ACCORDING TO KEY PRESS
                                      
                                   
	                           cmp            counter_p2 , 0
	                           ja             Decrement2_1
	                           jmp            continue2

	Decrement2_1:              dec            counter_p2
	                           jmp            far ptr  draw2
               
 
	continue2:                 mov            bl,0                                	;CLEAR ALL PREVENT VARIABLES
	                           mov            prevent_up,bl
	                           mov            prevent_down,bl
	                           mov            prevent_left,bl
	                           mov            prevent_right,bl

                                  
	                           cmp            ah,w                                	;CHECK IF UP ARROW PRESSED
	                           jne            nextcmp_2

	                           call           check_up2                           	;CHECK IF THERE IF BARRIER ABOVE
	                           cmp            prevent_up,1
	                           je             draw2

	                           call           Draw_second_object_reverse          	;DRAW BLACK IN OLD PLACE
	                           mov            ax,object2_start_y                  	;CHANGE COORDINATES
	                           sub            ax,1
	                           mov            object2_start_y,ax
	                           jmp            draw2
	break2:                    jmp            rtn5
	nextcmp_2:                 
	                           cmp            ah,s
	                           jnz            nextcmp_2_2
	                           call           check_down2
	                           cmp            prevent_down,1
	                           je             draw2
	                           call           Draw_second_object_reverse
	                           mov            ax,object2_start_y
	                           add            ax,1
	                           mov            object2_start_y,ax
	                           jmp            draw2
	nextcmp_2_2:               
	                           cmp            ah,d
	                           jnz            nextcmp_2_3
	                           call           check_right2
	                           cmp            prevent_right,1
	                           je             draw2
	                           call           Draw_second_object_reverse
	                           mov            ax,object2_start_x
	                           add            ax,1
	                           mov            object2_start_x,ax
	                           jmp            draw2
	nextcmp_2_3:               
	                           cmp            ah,a
	                           jnz            draw2
	                           call           check_left2
	                           cmp            prevent_left,1
	                           je             draw2
	                           call           Draw_second_object_reverse
	                           mov            ax,object2_start_x
	                           sub            ax,1
	                           mov            object2_start_x,ax
	draw2:                     
	                           lea            si,object2                          	;DRAW BODY AFTER CHANGIN COORDINATES
	                           mov            bx,object2_size
	                           mov            cx,object2_start_x
	                           mov            dx,object2_start_y
	                           call           DRAW_OBJECT
                                 
	rtn5:                      ret
DO_MOTION2 ENDP







	
HANDLE_INPUT PROC

	;CLEARS THE KEYBOARD TYPEHEAD BUFFER AND COLLECTS A SCANCODE

	;ALTERS BP

	                        
	                           push           es

	                           mov            ax, 40h
	                           mov            es, ax                              	;access keyboard data area via segment 40h
	                           mov            WORD PTR es:[1ah], 1eh              	;set the kbd buff head to start of buff
	                           mov            WORD PTR es:[1ch], 1eh              	;set the kbd buff tail to same as buff head
	;the keyboard typehead buffer is now cleared
	                           xor            ah, ah
	                           in             al, 60h                             	;al -> scancode

	                           pop            es
	                     
	                           ret


HANDLE_INPUT ENDP








	;----------------------------------- ( Drawing powers up objects)-------------------------------------------
Draw_PowersUp proc

							
	; Draw freeze ghosts Power
	                           cmp            frz_ghosts , 1
	                           jz             line1
	                           mov            bx , freeze_ghosts_size
	                           mov            si , offset object_freeze_ghosts
	                           mov            cx , freeze_ghosts_startX
	                           mov            dx , freeze_ghosts_startY
	                           call           DRAW_OBJECT
                    
	; draw start from beginning power
                 
	line1:                     cmp            srt_begin ,1
	                           jz             line2
	                           mov            si , offset object_start_beginning
	                           mov            bx , start_beginning_size
	                           mov            cx , start_beginning_startX
	                           mov            dx , start_beginning_startY
	                           call           DRAW_OBJECT

	; Draw freeze player power
	line2:                     cmp            frz_player ,  1
	                           jz             line3
	                           mov            si , offset object_freeze_player
	                           mov            bx , freeze_player_size
	                           mov            cx , freeze_player_startX
	                           mov            dx , freeze_player_startY
	                           call           DRAW_OBJECT

	line3:                                                                        	; draw Invisible power up
	                           cmp            Invisible , 1
	                           jz             line4
	                           mov            si , offset object_Invisible
	                           mov            bx , Invisible_size
	                           mov            cx , Invisible_startX
	                           mov            dx , Invisible_startY
	                           call           DRAW_OBJECT
  
	; draw Random power up
	line4:                     cmp            Random , 1
	                           jz             line5
	                           mov            si , offset object_Random
	                           mov            bx , Random_size
	                           mov            cx , Random_startX
	                           mov            dx , Random_startY
	                           call           DRAW_OBJECT
	



	line5:                     
	                           
	                           mov            ah,level                            	;--------CheckLevel
	                           cmp            ah,2
	                           jne            rtn

	                           cmp            srtU_begin , 1
	                           jz             line6
	                           mov            si , offset object_startU_beginning
	                           mov            bx , startU_beginning_size
	                           mov            cx , startU_beginning_startX
	                           mov            dx , startU_beginning_startY
	                           call           DRAW_OBJECT

                              

	line6:                     cmp            frzU_player ,  1
	                           jz             line7
	                           mov            si , offset object_freeze_you
	                           mov            bx , freeze_you_size
	                           mov            cx , freeze_you_startX
	                           mov            dx , freeze_you_startY
	                           call           DRAW_OBJECT

	line7:                     cmp            NotInvisible , 1
	                           jz             rtn
	                           mov            si , offset object_NotInvisible
	                           mov            bx , NotInvisible_size
	                           mov            cx , NotInvisible_startX
	                           mov            dx , NotInvisible_startY
	                           call           DRAW_OBJECT
                   
	rtn:                       ret

Draw_PowersUp EndP


	;-------------------------------------------------------------------------------------------------

	;----------------------------------------(New)----------------------------------------

Random_p1 proc
	; removing player2 from current place and move to random location

	                           mov            si , offset object2_reverse
	                           mov            bx , object2_size
	                           mov            cx , object2_start_x
	                           mov            dx , object2_start_y
	                           call           DRAW_OBJECT

	try:                       mov            ah , 2ch
	                           int            21h
	                           mov            al , dh
	                           mov            ah  , 0
	                           mov            dx , 0
	                           mov            bl , 4
	                           idiv           bl                                  	; result is in AL
    
	                           mov            dl  ,  1                            	; new startY  of second player
	                           mov            ah , 0
	                           mov            bl , al                             	; bl has new startX
	                           mov            bh , 26
	                           mov            al , dl
	                           imul           bh
	                           add            al , bl
	                           mov            ah  , 0
	                           mov            si , offset mymatrix
	                           add            si , ax
	                           cmp            [si] , dl
	                           jz             try
	                           mov            al , 10
	                           imul           bl
	                           mov            object2_start_x , ax
	                           mov            object2_start_y , 10
	                           mov            si , offset object2
	                           mov            bx , object2_size
	                           mov            cx , object2_start_x
	                           mov            dx , object2_start_y
	                           call           DRAW_OBJECT
            
           
	rtn4:                      ret

Random_p1 Endp

	;-----------------------------------------(New)-----------------------------------
Benefit1 proc
	; start_beginning_size dw 10
	;  start_beginning_startX dw 130
	; start_beginning_startY dw 70
	;  srt_begin_reverse db 100 dup(0)
	; object2_size     dw 10
	;object2_start_x  dw 250
	;object2_start_y  dw 70
	                           cmp            bl , 1
	                           jnz            nxt_cmp1_1                          	; nxt_cmp1_1 is for power2 (freeze_player)
	                           mov            si , offset srt_begin_reverse
	                           mov            bx , start_beginning_size
	                           mov            cx , start_beginning_startX
	                           mov            dx , start_beginning_startY
	                           call           DRAW_OBJECT
	                           mov            si , offset object2_reverse
	                           mov            bx , object2_size
	                           mov            cx , object2_start_x
	                           mov            dx , object2_start_y
	                           call           DRAW_OBJECT
	                           mov            object2_start_x , 250
	                           mov            object2_start_y , 70
	                           mov            si , offset object2
	                           mov            bx , object2_size
	                           mov            cx , 250
	                           mov            dx , 70
	                           call           DRAW_OBJECT
	                           jmp            finish2

	nxt_cmp1_1:                cmp            bl , 2
	                           jnz            nxt_cmp2_1                          	; nxt_cmp2_1 is for power3 (freeze_ghosts)
	                           mov            si , offset freeze_player_reverse
	                           mov            bx , freeze_player_size
	                           mov            cx , freeze_player_startX
	                           mov            dx , freeze_player_startY
	                           call           DRAW_OBJECT
	                           mov            counter_p2 , 1000
	                           jmp            finish2

	nxt_cmp2_1:                
	                           cmp            bl , 3
	                           jnz            nxt_cmp3_1                          	; nxt_cmp3_1  for  power4  (invisible to ghosts)
	                           mov            si , offset freeze_ghosts_reverse
	                           mov            bx , freeze_ghosts_size
	                           mov            cx , freeze_ghosts_startX
	                           mov            dx , freeze_ghosts_startY
	                           call           DRAW_OBJECT
	                           mov            counter_ghosts , 1000
	                           jmp            finish2

	nxt_cmp3_1:                
	                           cmp            bl , 4
	                           jnz            nxt_cmp4_1
	                           mov            si , offset Invisible_reverse
	                           mov            bx , Invisible_size
	                           mov            cx , Invisible_startX
	                           mov            dx , Invisible_startY
	                           call           DRAW_OBJECT
	                           mov            Invisible_p1 , 1
	                           jmp            finish2

	nxt_cmp4_1:                
	                           cmp            bl , 5
	                           jnz            nxt_cmp5_1
	                           mov            si , offset Random_reverse
	                           mov            bx , Random_size
	                           mov            cx , Random_startX
	                           mov            dx , Random_startY
	                           call           DRAW_OBJECT
	                           call           Random_p1

							  


	nxt_cmp5_1:                
	                           mov            ah,level
	                           cmp            ah,2
	                           jne            finish2
           
	                           cmp            bl , 6
	                           jnz            nxt_cmp6_1
	                           mov            si , offset srtU_begin_reverse
	                           mov            bx , startU_beginning_size
	                           mov            cx , startU_beginning_startX
	                           mov            dx , startU_beginning_startY
	                           call           DRAW_OBJECT
	                           mov            si , offset object_reverse
	                           mov            bx , object_size
	                           mov            cx , object_start_x
	                           mov            dx , object_start_y
	                           call           DRAW_OBJECT
	                           mov            object_start_x , 0
	                           mov            object_start_y , 70

	nxt_cmp6_1:                
	                           cmp            bl , 7
	                           jnz            nxt_cmp7_1
	                           mov            si , offset freeze_you_reverse
	                           mov            bx , freeze_you_size
	                           mov            cx , freeze_you_startX
	                           mov            dx , freeze_you_startY
	                           call           DRAW_OBJECT
	                           mov            counter_p1,1000
	                           jmp            finish2

	
	nxt_cmp7_1:                
	                           cmp            bl , 8
	                           jnz            finish2
	                           mov            si , offset NotInvisible_reverse
	                           mov            bx , NotInvisible_size
	                           mov            cx , NotInvisible_startX
	                           mov            dx , NotInvisible_startY
	                           call           DRAW_OBJECT
	                           mov            Invisible_p1 , 0
	                           mov            Invisible_p2 , 1
							   
							         

	finish2:                   ret
Benefit1 Endp
	;----------------------- (New)---------------------------------------
touching_powerUp1 proc
     
	; mov ax,object1_size
	; mov bx,object1_x
	; mov cx,object1_y
	; mov dx,object2_size
	; mov bp,object2_x
	; mov di,object2_y
	; first power up(srt beginning)
	                           cmp            srt_begin , 1
	                           jz             power2
	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , start_beginning_size
	                           mov            bp , start_beginning_startX
	                           mov            di , start_beginning_startY
	                           call           check_touchig
	                           cmp            ax , 1
	                           jnz            power2
	                           mov            bl,1
	                           call           Benefit1
	                           mov            srt_begin ,1
	                           call           emptysatusbar
	                           mov            cx,31
	                           lea            SI,Player2SRT
	                           call           updatesatusbar
	                           mov            ax , 0
	                           jmp            finish1

	power2:                                                                       	;second power up is freee player
	                           cmp            frz_player , 1
	                           jz             power3
	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , freeze_player_size
	                           mov            bp , freeze_player_startX
	                           mov            di , freeze_player_startY
	                           call           check_touchig
	                           cmp            ax , 1
	                           jnz            power3
	                           mov            bl,2
	                           call           Benefit1
	                           mov            frz_player ,1

	                           call           emptysatusbar
	                           mov            cx,14
	                           lea            SI,Player2f
	                           call           updatesatusbar

	                           mov            ax , 0
	                           jmp            finish1


	power3:                                                                       	; third power up is freeving ghosts
	                           cmp            frz_ghosts , 1
	                           jz             power4
	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , freeze_ghosts_size
	                           mov            bp , freeze_ghosts_startX
	                           mov            di , freeze_ghosts_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power4
	                           mov            bl,3
	                           call           Benefit1
	                           mov            frz_ghosts ,1

	                           call           emptysatusbar
	                           mov            cx,13
	                           lea            SI,GohstsFrozen
	                           call           updatesatusbar

	                           mov            ax , 0
	                           jmp            finish1
        

	power4:                    
	                           cmp            Invisible , 1
	                           jz             power5
	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , Invisible_size
	                           mov            bp , Invisible_startX
	                           mov            di , Invisible_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power5
	                           mov            bl , 4
	                           call           Benefit1
	                           mov            Invisible  , 1

	                           call           emptysatusbar
	                           mov            cx,30
	                           lea            SI,Player1In
	                           call           updatesatusbar

	                           mov            ax , 0
	                           jmp            finish1


	power5:                    
	                           cmp            Random ,   1
	                           jz             power6
	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , Random_size
	                           mov            bp , Random_startX
	                           mov            di , Random_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power6
	                           mov            bl , 5
	                           call           Benefit1
	                           mov            Random , 1

	                           call           emptysatusbar
	                           mov            cx,30
	                           lea            SI,Player2RND
	                           call           updatesatusbar

	                           mov            ax , 0
	                           jmp            finish1


                              

	power6:                    
	                           mov            ah,level                            	;--------CheckLevel
	                           cmp            ah,2
	                           jne            far ptr  mybreak2

	                           cmp            srtU_begin ,   1
	                           jz             power7
	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , startU_beginning_size
	                           mov            bp , startU_beginning_startX
	                           mov            di , startU_beginning_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power7
	                           mov            bl , 6
	                           call           Benefit1
	                           mov            srtU_begin , 1

	                           call           emptysatusbar
	                           mov            cx,31
	                           lea            SI,Player1SRT
	                           call           updatesatusbar

	                           mov            ax , 0
	                           jmp            finish1
	mybreak2:                  
	                           mov            ah,level                            	;--------CheckLevelagain:(
	                           cmp            ah,2
	                           jne            far ptr  mybreak3

	power7:                    
	                           cmp            frzU_player ,   1
	                           jz             power8
	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , freeze_you_size
	                           mov            bp , freeze_you_startX
	                           mov            di , freeze_you_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power8
	                           mov            bl , 7
	                           call           Benefit1
	                           mov            frzU_player , 1
	                           call           emptysatusbar
	                           mov            cx,14
	                           lea            SI,Player1f
	                           call           updatesatusbar

	                           mov            ax , 0
	                           jmp            finish1

	mybreak3:                  
	                           mov            ah,level                            	;--------CheckLevelagain:(
	                           cmp            ah,2
	                           jne            far ptr  finish1

	power8:                    
	                           cmp            NotInvisible ,   1
	                           jz             finish1
	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , NotInvisible_size
	                           mov            bp , NotInvisible_startX
	                           mov            di , NotInvisible_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            finish1
	                           mov            bl , 8
	                           call           Benefit1
	                           mov            NotInvisible , 1

	                           call           emptysatusbar
	                           mov            cx,30
	                           lea            SI,Player2In
	                           call           updatesatusbar

	                           mov            ax , 0
	                      

	finish1:                   
	                           ret
touching_powerUp1 Endp
bothtouching proc   far

	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , object2_size
	                           mov            bp , object2_start_x
	                           mov            di , object2_start_y
	                           call           check_touchig
	                           ret
bothtouching Endp
	;-----------------------------------------------------(new)-----------------------------------------------------
chk_touching_ghost proc

	                           cmp            Invisible_p1 , 1
	                           jz             break6


	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , gohst1_size
	                           mov            bp , gohst1_start_x
	                           mov            di , gohst1_start_y
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jne            chk_g22
	break6:                    jmp            rtn7
         

	chk_g22:                   mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , gohst2_size
	                           mov            bp , gohst2_start_x
	                           mov            di , gohst2_start_y
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jne            chk_g23
	                           jmp            rtn7

							   
	chk_g23:                   
	                           mov            ah,level
	                           cmp            ah,2
	                           jne            rtn7

	                           mov            ax , object_size
	                           mov            bx , object_start_x
	                           mov            cx , object_start_y
	                           mov            dx , gohst3_size
	                           mov            bp , gohst3_start_x
	                           mov            di , gohst3_start_y
	                           call           check_touchig
	rtn7:                      ret
chk_touching_ghost endp
	;-------------------------------------------------------------------------------------------------------------------------------------------

Random_p2 proc
	; removing player1 from current place and move to random location

	                           mov            si , offset object_reverse
	                           mov            bx , object_size
	                           mov            cx , object_start_x
	                           mov            dx , object_start_y
	                           call           DRAW_OBJECT

	try2:                      mov            ah , 2ch
	                           int            21h
	                           mov            al , dh
	                           mov            ah  , 0
	                           mov            dx , 0
	                           mov            bl , 4
	                           idiv           bl                                  	; result is in AL
    
	                           mov            dl  ,  1                            	; new startY  of  player
	                           mov            ah , 0
	                           mov            bl , al                             	; bl has new startX
	                           mov            bh , 26
	                           mov            al , dl
	                           imul           bh
	                           add            al , bl
	                           mov            ah  , 0
	                           mov            si , offset mymatrix
	                           add            si , ax
	                           cmp            [si] , dl
	                           jz             try2
	                           mov            al , 10
	                           imul           bl
	                           mov            object_start_x , ax
	                           mov            object_start_y , 10
	                           mov            si , offset object
	                           mov            bx , object_size
	                           mov            cx , object_start_x
	                           mov            dx , object_start_y
	                           call           DRAW_OBJECT
            
           
	rtn4_2:                    ret

Random_p2 Endp

	;-----------------------------------------(New)-----------------------------------
Benefit2 proc
	; start_beginning_size dw 10
	;  start_beginning_startX dw 130
	; start_beginning_startY dw 70
	;  srt_begin_reverse db 100 dup(0)
	; object2_size     dw 10
	;object2_start_x  dw 250
	;object2_start_y  dw 70
	                           cmp            bl , 1
	                           jnz            nxt_cmp2_2                          	; nxt_cmp2_2 is for power2 (freeze_player)
	                           mov            si , offset srt_begin_reverse
	                           mov            bx , start_beginning_size
	                           mov            cx , start_beginning_startX
	                           mov            dx , start_beginning_startY
	                           call           DRAW_OBJECT
	                           mov            si , offset object_reverse
	                           mov            bx , object_size
	                           mov            cx , object_start_x
	                           mov            dx , object_start_y
	                           call           DRAW_OBJECT
	                           mov            object_start_x , 0
	                           mov            object_start_y , 70
	                           mov            si , offset object
	                           mov            bx , object_size
	                           mov            cx , 0
	                           mov            dx , 70
	                           call           DRAW_OBJECT
	                           jmp            finish2_2

	nxt_cmp2_2:                cmp            bl , 2
	                           jnz            nxt_cmp3_2                          	; nxt_cmp3_2 is for power3 (freeze_ghosts)
	                           mov            si , offset freeze_player_reverse
	                           mov            bx , freeze_player_size
	                           mov            cx , freeze_player_startX
	                           mov            dx , freeze_player_startY
	                           call           DRAW_OBJECT
	                           mov            counter_p1 , 1000
	                           jmp            finish2_2

	nxt_cmp3_2:                
	                           cmp            bl , 3
	                           jnz            nxt_cmp4_2                          	; nxt_cmp4_2  for  power4  (invisible to ghosts)
	                           mov            si , offset freeze_ghosts_reverse
	                           mov            bx , freeze_ghosts_size
	                           mov            cx , freeze_ghosts_startX
	                           mov            dx , freeze_ghosts_startY
	                           call           DRAW_OBJECT
	                           mov            counter_ghosts , 1000
	                           jmp            finish2_2

	nxt_cmp4_2:                
	                           cmp            bl , 4
	                           jnz            nxt_cmp5_2
	                           mov            si , offset Invisible_reverse
	                           mov            bx , Invisible_size
	                           mov            cx , Invisible_startX
	                           mov            dx , Invisible_startY
	                           call           DRAW_OBJECT
	                           mov            Invisible_p2 , 1
	                           jmp            finish2_2

	nxt_cmp5_2:                
	                           cmp            bl , 5
	                           jnz            nxt_cmp6_2
	                           mov            si , offset Random_reverse
	                           mov            bx , Random_size
	                           mov            cx , Random_startX
	                           mov            dx , Random_startY
	                           call           DRAW_OBJECT
	                           call           Random_p2
	                           jmp            finish2_2
                               
							  
	nxt_cmp6_2:                
	                           mov            ah,level
	                           cmp            ah,2
	                           jne            finish2_2

	                           cmp            bl , 6
	                           jnz            nxt_cmp7_2
	                           mov            si , offset srtU_begin_reverse
	                           mov            bx , startU_beginning_size
	                           mov            cx , startU_beginning_startX
	                           mov            dx , startU_beginning_startY
	                           call           DRAW_OBJECT
	                           mov            si , offset object2_reverse
	                           mov            bx , object2_size
	                           mov            cx , object2_start_x
	                           mov            dx , object2_start_y
	                           call           DRAW_OBJECT
	                           mov            object2_start_x , 250
	                           mov            object2_start_y , 70
	                           jmp            finish2_2
          
	                          
	nxt_cmp7_2:                
	                           cmp            bl , 7
	                           jnz            nxt_cmp8_2
	                           mov            si , offset freeze_you_reverse
	                           mov            bx , freeze_you_size
	                           mov            cx , freeze_you_startX
	                           mov            dx , freeze_you_startY
	                           call           DRAW_OBJECT
	                           mov            counter_p2,1000
	                           jmp            finish2

	nxt_cmp8_2:                cmp            bl , 8
	                           jmp            finish2_2
	                           mov            si , offset NotInvisible_reverse
	                           mov            bx , NotInvisible_size
	                           mov            cx , NotInvisible_startX
	                           mov            dx , NotInvisible_startY
	                           call           DRAW_OBJECT
	                           mov            Invisible_p2 , 0
	                           mov            Invisible_p1 , 1

							           

	finish2_2:                 ret
Benefit2 Endp
	;----------------------- (New)---------------------------------------
touching_powerUp2 proc
     
	; mov ax,object1_size
	; mov bx,object1_x
	; mov cx,object1_y
	; mov dx,object2_size
	; mov bp,object2_x
	; mov di,object2_y
	; first power up(srt beginning)
	                           cmp            srt_begin , 1
	                           jz             power2_2
	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , start_beginning_size
	                           mov            bp , start_beginning_startX
	                           mov            di , start_beginning_startY
	                           call           check_touchig
	                           cmp            ax , 1
	                           jnz            power2_2
	                           mov            bl,1
	                           call           Benefit2
	                           mov            srt_begin ,1
                                
	                           call           emptysatusbar
	                           mov            cx,31
	                           lea            SI,Player1SRT
	                           call           updatesatusbar


	                           jmp            finish1_2

	power2_2:                                                                     	;second power up is freee player
	                           cmp            frz_player , 1
	                           jz             power3_2
	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , freeze_player_size
	                           mov            bp , freeze_player_startX
	                           mov            di , freeze_player_startY
	                           call           check_touchig
	                           cmp            ax , 1
	                           jnz            power3_2
	                           mov            bl,2
	                           call           Benefit2
	                           mov            frz_player ,1

	                           call           emptysatusbar
	                           mov            cx,14
	                           lea            SI,Player1f
	                           call           updatesatusbar
	                           mov            ax , 0
	                           jmp            finish1_2


	power3_2:                                                                     	; third power up is freezing ghosts
	                           cmp            frz_ghosts , 1
	                           jz             power4_2
	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , freeze_ghosts_size
	                           mov            bp , freeze_ghosts_startX
	                           mov            di , freeze_ghosts_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power4_2
	                           mov            bl,3
	                           call           Benefit2
	                           mov            frz_ghosts ,1
	                           call           emptysatusbar
	                           mov            cx,13
	                           lea            SI,GohstsFrozen
	                           call           updatesatusbar
	                           mov            ax , 0
	                           jmp            finish1_2
        

	power4_2:                  
	                           cmp            Invisible , 1
	                           jz             power5_2
	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , Invisible_size
	                           mov            bp , Invisible_startX
	                           mov            di , Invisible_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power5_2
	                           mov            bl , 4
	                           call           Benefit2
	                           mov            Invisible  , 1
	                           call           emptysatusbar
	                           mov            cx,30
	                           lea            SI,Player2In
	                           call           updatesatusbar

	                           mov            ax , 0
	                           jmp            finish1_2


	power5_2:                  
	                           cmp            Random ,   1
	                           jz             power6_2
	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , Random_size
	                           mov            bp , Random_startX
	                           mov            di , Random_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power6_2
	                           mov            bl , 5
	                           call           Benefit2
	                           mov            Random , 1

	                           call           emptysatusbar
	                           mov            cx,30
	                           lea            SI,Player1RND
	                           call           updatesatusbar
	                           mov            ax , 0
	                           jmp            finish1_2

							  
	power6_2:                  
	                           mov            ah,level
	                           cmp            ah,2
	                           jne            mybreak

	                           cmp            srtU_begin ,   1
	                           jz             power7_2
	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , startU_beginning_size
	                           mov            bp , startU_beginning_startX
	                           mov            di , startU_beginning_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power7_2
	                           mov            bl , 6
	                           call           Benefit2
	                           mov            srtU_begin , 1

	                           call           emptysatusbar
	                           mov            cx,31
	                           lea            SI,Player2SRT
	                           call           updatesatusbar

	                           mov            ax , 0
	                           jmp            finish1_2
	mybreak:                   
	                           mov            ah,level
	                           cmp            ah,2
	                           jne            mybreak5
	power7_2:                  cmp            frzU_player ,   1
	                           jz             power8_2
	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , freeze_you_size
	                           mov            bp , freeze_you_startX
	                           mov            di , freeze_you_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            power8_2
	                           mov            bl , 7
	                           call           Benefit2
	                           mov            frzU_player , 1
	                           call           emptysatusbar
	                           mov            cx,14
	                           lea            SI,Player2f
	                           call           updatesatusbar
	                           mov            ax , 0
	                           jmp            finish1_2

	mybreak5:                  
	                           mov            ah,level
	                           cmp            ah,2
	                           jne            finish1_2

	power8_2:                  
	                           cmp            NotInvisible ,   1
	                           jz             finish1_2
	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , NotInvisible_size
	                           mov            bp , NotInvisible_startX
	                           mov            di , NotInvisible_startY
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jnz            finish1_2
	                           mov            bl , 8
	                           call           Benefit2
	                           mov            NotInvisible , 1

	                           call           emptysatusbar
	                           mov            cx,30
	                           lea            SI,Player1In
	                           call           updatesatusbar


	                           mov            ax , 0
    
	finish1_2:                 
	                           ret
touching_powerUp2 Endp

	;-----------------------------------------------------(new)-----------------------------------------------------
chk_touching_ghost2 proc  far

	                           cmp            Invisible_p2  , 1
	                           jz             break5


	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , gohst1_size
	                           mov            bp , gohst1_start_x
	                           mov            di , gohst1_start_y
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jne            chk_g2_2
	break5:                    jmp            rtn3_3

	chk_g2_2:                  mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , gohst2_size
	                           mov            bp , gohst2_start_x
	                           mov            di , gohst2_start_y
	                           call           check_touchig
	                           cmp            ax  , 1
	                           jne            chk_g3_2
	                           jmp            rtn3_3

							   

	chk_g3_2:                  
	                           mov            ah,level
	                           cmp            ah,2
	                           jne            rtn3_3

	                           mov            ax , object2_size
	                           mov            bx , object2_start_x
	                           mov            cx , object2_start_y
	                           mov            dx , gohst3_size
	                           mov            bp , gohst3_start_x
	                           mov            di , gohst3_start_y
	                           call           check_touchig

	rtn3_3:                    ret
chk_touching_ghost2 endp



	;-------------------------------------------------------------------------------------------------------------------------------------------------
doesp1win proc
	                           mov            bx,p1_winx
	                           mov            cx,p1_winy
	                           cmp            bx,object_start_x
	                           jne            notequ
	                           cmp            cx,object_start_y
	                           jne            notequ
	                           mov            ax,1
	                           jmp            final
	notequ:                    
	                           mov            ax,0
                
	final:                     ret
doesp1win endp

doesp2win proc

	                           mov            bx,p2_winx
	                           mov            cx,p2_winy
	                           cmp            bx,object2_start_x
	                           jne            notequ2
	                           cmp            cx,object2_start_y
	                           jne            notequ2
	                           mov            ax,1
	                           jmp            final2
	notequ2:                   
	                           mov            ax,0
                
	final2:                    ret
doesp2win endp
	;-----------------------------NewEnd


INITIALIZE PROC
	;SET DIVISOR LATCH ACCESS BIT
	                           MOV            DX,3FBH                             	;LINE CONTROL REGISTER
	                           MOV            AL,10000000B                        	;SET DIVISOR LATCH ACCESS BIT
	                           OUT            DX,AL                               	;OUT IT
	;SET LSB BYTE OF THE BAUD RATE DIVISOR LATCH REGISTER
	                           MOV            DX,3F8H
	                           MOV            AL,0CH
	                           OUT            DX,AL
	;SET MSB BYTE OF THE BAUD RATE DIVISOR LATCH REGISTER
	                           MOV            DX,3F9H
	                           MOV            AL,00H
	                           OUT            DX,AL
	;SET PORT CONFIGURATION
	                           MOV            DX,3FBH
	                           MOV            AL,00011011B
	                           OUT            DX,AL
	                           RET
INITIALIZE ENDP


SPLIT_SCREEN PROC
	; INT 10H + AH=06   ->  SCROLL UP WINDOW
	; AL = 0 CLEARS THE SCREEN - OR - AL = ANY OTHER VALUE -> NO OF LINES TO SCROLL
	; BH = "BACKGROUNG COLOR NUMBER" + "FOREGROUND COLOR NUMBER"
	; CH = UPPER ROW NUMBER
	; CL = LEFT COLUMN NUMBER
	; DH = LOWER ROW NUMBER
	; DL = RIGHT COLUMN NUMBER
	                           MOV            AX,0600H
	                           MOV            BH,00
	                           MOV            CX,0
	                           MOV            DX,184FH                            	;CLEAR WHOLE SCREEN
	                           INT            10H


	; INT 10H + AH=02 -> SET CURSOR POSITION
	; BH = PAGE NUMBER
	; DH = ROW
	; DL = COLUMN
	                           MOV            AH,2
	                           MOV            DL,0
	                           MOV            DH , 12
	                           INT            10H


	; INT 10H + AH=09 -> WRITE CHARACTER AND ATTRIBUTE IN CURSOR POSITION
	; AL = CHARACTER
	; BH = PAGE NUMBER
	; BL = COLOR
	; CX = NUMBER OF TIMES TO PRINT CHARACTER
	                           MOV            AH,9
	                           MOV            BH,0
	                           MOV            AL,'_'
	                           MOV            CX,80
	                           MOV            BL,0FH
	                           INT            10H

	                           MOV            AH,2
	                           MOV            DL,0
	                           MOV            DH ,0
	                           INT            10H
	                           RET
SPLIT_SCREEN ENDP

DISPLAY_IN_FIRST_HALF PROC
	; CHECK IF ENTER PRESSED?
	; IF YES START NEW LINE
	; ELSE SKIP THIS PART
	                           cmp            al,8
	                           jne            ttt
	                           ret
	ttt:                       
	                           mov            al,VALUE_SENT
	                           CMP            al,13
	                           JNE            SET_CURSOR_FOR_PRINT


	NEXT_LINE:                 
	; THIS BLOCK STORES END OF LINE
	; THEN STARTS NEW ONE AND SCROLLS
	                           INC            CURSOR_SEND_Y                       	;START NEW LINE
	                           MOV            CURSOR_SEND_X,0                     	;SET X TO LINE BEGINNING
	                           JMP            SCROLL_TOP                          	;SCROLL ONE LINE


	SET_CURSOR_FOR_PRINT:      
	; THIS BLOCK SET THE CURSOR TO X,Y
	                           MOV            AH,2
	                           MOV            DL ,CURSOR_SEND_X
	                           MOV            DH ,CURSOR_SEND_Y
	                           INT            10H


	PRINT_CHARACTER:           
	; THIS BLOCK PRINTS THE VALUE_SENT
	                           MOV            AH,9
	                           MOV            BH,0
	                           MOV            AL ,VALUE_SENT
	                           MOV            CX,1H
	                           MOV            BL,0cH
	                           INT            10H

	                           INC            CURSOR_SEND_X
	;IF END OF LINE DON'T FINISH
	                           CMP            CURSOR_SEND_X ,80
	                           JNE            FINISH_FIRST_HALF
	                           JMP            NEXT_LINE



	;IF Y  ==  12
	;SCROLL ONE LINE

	SCROLL_TOP:                
	                           CMP            CURSOR_SEND_Y,12
	                           JNE            FINISH_FIRST_HALF
	                           MOV            AH,6                                	; FUNCTION 6
	                           MOV            AL,1                                	; SCROLL BY 1 LINE
	                           MOV            BH,0                                	; NORMAL VIDEO ATTRIBUTE
	                           MOV            CH,3                                	; UPPER LEFT Y
	                           MOV            CL,0                                	; UPPER LEFT X
	                           MOV            DH,11                               	; LOWER RIGHT Y
	                           MOV            DL,79                               	; LOWER RIGHT X
	                           INT            10H


	                           DEC            CURSOR_SEND_Y

	FINISH_FIRST_HALF:         

	;SET NEW CURSOR POSITION
	                           MOV            AH,2
	                           MOV            DL ,CURSOR_SEND_X
	                           MOV            DH ,CURSOR_SEND_Y
	                           INT            10H

	                           MOV            AL,0
	                           RET
DISPLAY_IN_FIRST_HALF ENDP







DISPLAY_IN_SECOND_HALF PROC
	; CHECK IF ENTER PRESSED?
	; IF YES START NEW LINE
	; ELSE SKIP THIS PART
    
	                           cmp            al,8
	                           jne            tts
	                           ret
	                       
	tts:                       
	                           mov            al,VALUE_REC
	                           CMP            al,13
	                           JNE            SET_CURSOR_FOR_PRINT2


	NEXT_LINE2:                
	; THIS BLOCK STORES END OF LINE
	; THEN STARTS NEW ONE AND SCROLLS
	                           INC            CURSOR_REC_Y
	                           MOV            CURSOR_REC_X,0
	                           JMP            SCROLL_BOTTOM
						   

	SET_CURSOR_FOR_PRINT2:     
	; THIS BLOCK SET THE CURSOR TO X,Y
	                           MOV            AH,2
	                           MOV            DL ,CURSOR_REC_X
	                           MOV            DH ,CURSOR_REC_Y
	                           INT            10H
	
	; THIS BLOCK PRINTS THE VALUE_SENT
	                           MOV            AH,9
	                           MOV            BH,0
	                           MOV            CX,1H
	                           MOV            BL,0dH
	                           INT            10H
	                           INC            CURSOR_REC_X

	;IF END OF LINE DON'T FINISH
	                           CMP            CURSOR_REC_X ,80
	                           JNE            FINISH_SECOND_HALF
	                           JMP            NEXT_LINE2



				
	;IF Y  ==  25
	;SCROLL ONE LINE

	SCROLL_BOTTOM:             
	                           CMP            CURSOR_REC_Y,25
	                           JNE            FINISH_SECOND_HALF
	                           MOV            AH,6
	                           MOV            AL,1
	                           MOV            BH,0
	                           MOV            CH,16
	                           MOV            CL,0
	                           MOV            DH,24
	                           MOV            DL,79
	                           INT            10H
	


	                           DEC            CURSOR_REC_Y

	FINISH_SECOND_HALF:        
	;SET NEW CURSOR POSITION
	                           MOV            AH,2
	                           MOV            DL ,CURSOR_SEND_X
	                           MOV            DH ,CURSOR_SEND_Y
	                           INT            10H
						   
	                           MOV            AL,0
	                           RET
DISPLAY_IN_SECOND_HALF ENDP


CHAT PROC
	;INITIALIZE SCREEN
	                           CALL           INITIALIZE
	                           CALL           SPLIT_SCREEN


	
	                           mov            CURSOR_SEND_X,0
	                           mov            CURSOR_SEND_Y,1
							   
	                           mov            ax, offset name1[2]
	                           mov            si, ax
	                           mov            cx,28

	                           mov            ah,2
	                           mov            dl,CURSOR_SEND_X                    	;x coordinates
	                           mov            dh,CURSOR_SEND_Y                    	;y coordinates
	                           int            10h

	print_name1:               
	                           mov            ah,2
	                           mov            dl,CURSOR_SEND_X                    	;x coordinates
	                           mov            dh,CURSOR_SEND_Y                    	;y coordinates
	                           int            10h

	                           MOV            AH,9
	                           MOV            BH,0
	                           MOV            AL ,[si]
	                           cmp            al,13
	                           je             break10
	                           inc            si
	                           push           cx
	                           MOV            CX,1H
	                           MOV            BL,0cH
	                           INT            10H
	                           pop            cx
	                           inc            CURSOR_SEND_X
	                           loop           print_name1
	break10:                   
	
	                           MOV            AH,9
	                           MOV            BH,0
	                           MOV            AL ,':'

	                           MOV            CX,1H
	                           MOV            BL,0cH
	                           INT            10H

	                           mov            CURSOR_SEND_X,0
	                           mov            CURSOR_SEND_Y,13
							   
	                           lea            ax,name2
	                           mov            si, ax
	                           mov            cx,28

	                           mov            ah,2
	                           mov            dl,CURSOR_SEND_X                    	;x coordinates
	                           mov            dh,CURSOR_SEND_Y                    	;y coordinates
	                           int            10h

	print_name100:             
	                           mov            ah,2
	                           mov            dl,CURSOR_SEND_X                    	;x coordinates
	                           mov            dh,CURSOR_SEND_Y                    	;y coordinates
	                           int            10h

	                           MOV            AH,9
	                           MOV            BH,0
	                           MOV            AL ,[si]
	                           cmp            al,13
	                           je             break11
	                           inc            si
	                           push           cx
	                           MOV            CX,1H
	                           MOV            BL,0dH
	                           INT            10H
	                           pop            cx
	                           inc            CURSOR_SEND_X
	                           loop           print_name100
	break11:                   
	                           MOV            AH,9
	                           MOV            BH,0
	                           MOV            AL ,':'

	                           MOV            CX,1H
	                           MOV            BL,0dH
	                           INT            10H

	                           mov            CURSOR_SEND_X,0
	                           mov            CURSOR_SEND_Y,3

	                           mov            CURSOR_REC_X ,0
	                           mov            CURSOR_REC_Y ,16
	;THE RECEIVE LOOP TAKES THE RECEIVED CHARACTERS ONE BY ONE AND CALLS THE PRINTING PROC ON EACH

	IN_CHECK_RECEIVE:          
	                           MOV            DX , 3FDH                           	; LINE STATUS REGISTER
	                           IN             AL , DX
	                           TEST           AL , 1
	                           JZ             NOTHING_TO_RECEIVE                  	;NOT READY


	                           MOV            DX , 03F8H                          	; RECEIVE REGISTER
	                           IN             AL , DX
	                           MOV            VALUE_REC , AL                      	; STORE THE VALUE RECEIVED IN THE VARIABLE

	                           CMP            AL,27                               	;IF RECEIVED ESCAPE CHARACTER EXIT
	                           JE             ESCAPE_EXIT

	DISPLAY_SEOND_HALF:        CALL           DISPLAY_IN_SECOND_HALF
	                           JMP            IN_CHECK_RECEIVE




	;IF NOTHING TO RECIEVE SEND CHARACTER IF ANY
	NOTHING_TO_RECEIVE:        
	                           MOV            AL,0

	                           MOV            AH,01H
	                           INT            16H                                 	;GET THE STATE OF KEYBOARD BUFFER

	                           CMP            AL,0
	                           JE             IN_CHECK_RECEIVE                    	;IF NOTHING IN UNPUT -> RECEIVE

	                           MOV            AH,00H                              	;READ THE CHAR AND PUT IN AL
	                           INT            16H
	                           MOV            VALUE_SENT,AL                       	;STORE DATA TO SEND


	SENDCHAT:                                                                     	;CHECK THAT TRANSMITTER HOLDING REGISTER IS EMPTY
	                           MOV            DX , 3FDH                           	;LINE STATUS REGISTER
	                           IN             AL , DX                             	;READ LINE STATUS
	                           TEST           AL , 00100000B
	                           JZ             IN_CHECK_RECEIVE                    	;NOT EMPTY
						   

	;IF EMPTY PUT THE VALUE IN TRANSMIT DATA REGISTER
	                           MOV            DX , 3F8H                           	; TRANSMIT DATA REGISTER
	                           MOV            AL,VALUE_SENT
	                           OUT            DX , AL

	                           CMP            AL,27
	                           JE             ESCAPE_EXIT

	DISPLAY_FIRST:             CALL           DISPLAY_IN_FIRST_HALF
	                           JMP            IN_CHECK_RECEIVE

	ESCAPE_EXIT:               
	                           ret
CHAT ENDP

sendrequest PROC
	                           push           ax
	                           MOV            DX , 3FDH
	                           IN             AL , DX
	                           TEST           AL , 00100000B
	                           JZ             return__22

	                           MOV            DX , 3F8H
	                           MOV            AL,f1
	                           OUT            DX , AL
	                           mov            al,1
	                           mov            chat_request_sent,al
	; set cursor
	                           mov            ah,2
	                           mov            dl,0                                	;x coordinates
	                           mov            dh,23                               	;y coordinates
	                           int            10h

	;print Get_Name_msg
	                           mov            ah, 9
	                           mov            dx, offset Chat_Request_Status
	                           int            21h
	                       
	return__22:                pop            ax
	                           ret
sendrequest ENDP


send_yes PROC
	                           push           ax
	                           cmp            chat_request_sent,1
	                           je             return__50
	sed:                       
	                           MOV            DX , 3FDH
	                           IN             AL , DX
	                           TEST           AL , 00100000B
	                           JZ             sed

	                           MOV            DX , 3F8H
	                           MOV            AL, f1
	                           OUT            DX , AL

	return__50:                pop            ax
	                           ret
send_yes ENDP

getanswer PROC
	                           push           ax

	;recieve
	                           MOV            DX , 3FDH
	                           IN             AL , DX
	                           TEST           AL , 1
	                           JZ             return__24

	                           MOV            DX , 03F8H
	                           IN             AL , DX
	                           cmp            al,'x'
	                           jne            check_anser
	                           mov            bl,1
	                           mov            level,bl
	                           jmp            return__23
	check_anser:               
	                           cmp            al,'y'
	                           jne            check_anserr
	                           mov            bl,2
	                           mov            level,bl
	                           jmp            return__23
	check_anserr:              
	                           cmp            f1 , AL
	                           jne            return__24

	                           cmp            chat_request_sent,1
	                           jne            didnt_send_request
	                           mov            dl,1
	                           jmp            return__23

	didnt_send_request:        
	                           mov            al,1
	                           mov            chat_request_recieved,al

	; set cursor
	                           mov            ah,2
	                           mov            dl,0                                	;x coordinates
	                           mov            dh,23                               	;y coordinates
	                           int            10h

	;print Get_Name_msg
	                           mov            ah, 9
	                           mov            dx, offset Chat_Recieved_Status
	                           int            21h
	return__24:                mov            dl,0

	return__23:                pop            ax
	                           ret
getanswer ENDP

	;description
send_level PROC
	                           push           ax
	                           cmp            ah,f1
	                           jne            checklevel2
	sssed:                     
	                           MOV            DX , 3FDH
	                           IN             AL , DX
	                           TEST           AL , 00100000B
	                           JZ             sssed

	                           MOV            DX , 3F8H
	                           MOV            AL, 'x'
	                           OUT            DX , AL
	checklevel2:               
	                           cmp            ah,f2
	                           jne            noneret
	ssssed:                    
	                           MOV            DX , 3FDH
	                           IN             AL , DX
	                           TEST           AL , 00100000B
	                           JZ             ssssed

	                           MOV            DX , 3F8H
	                           MOV            AL, 'y'
	                           OUT            DX , AL

	noneret:                   
	                           pop            ax
	                           ret
send_level ENDP




SPLIT_SCREEN_2 PROC
	                           mov            cx,40
	                           lea            si,empty
	                           mov            dh, 20                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	w232:                      
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0ah                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           w232
	                           
	                           mov            cx,40
	                           lea            si,empty
	                           mov            dh, 21                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	w233:                      
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0ah                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           w233
	                           mov            cx,40
	                           lea            si,empty
	                           mov            dh, 22                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	w234:                      
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0ah                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           w234
	                           RET
SPLIT_SCREEN_2 ENDP


IN_DISPLAY_IN_FIRST_HALF PROC
	; CHECK IF ENTER PRESSED?
	; IF YES START NEW LINE
	; ELSE SKIP THIS PART
	                           mov            al,IN_VALUE_SENT
	                           cmp            al,8
	                           jne            tttt
	                           ret
	tttt:                      
	                           CMP            al,13
	                           JNE            IN_SET_CURSOR_FOR_PRINT


	IN_NEXT_LINE:              
	; THIS BLOCK STORES END OF LINE
	; THEN STARTS NEW ONE AND SCROLLS
	                           INC            IN_CURSOR_SEND_Y                    	;START NEW LINE
	                           MOV            IN_CURSOR_SEND_X,0                  	;SET X TO LINE BEGINNING
	                           JMP            IN_SCROLL_TOP                       	;SCROLL ONE LINE


	IN_SET_CURSOR_FOR_PRINT:   
	; THIS BLOCK SET THE CURSOR TO X,Y
	                           MOV            AH,2
	                           MOV            DL ,IN_CURSOR_SEND_X
	                           MOV            DH ,IN_CURSOR_SEND_Y
	                           INT            10H


	IN_PRINT_CHARACTER:        
	; THIS BLOCK PRINTS THE VALUE_SENT
	                           MOV            AH,0ah
	                           MOV            BH,0
	                           MOV            AL ,IN_VALUE_SENT
	                           MOV            CX,1H
	                           MOV            BL,01H
	                           INT            10H

	                           INC            IN_CURSOR_SEND_X
	;IF END OF LINE DON'T FINISH
	                           CMP            IN_CURSOR_SEND_X ,20
	                           JNE            IN_FINISH_FIRST_HALF
	                           JMP            IN_NEXT_LINE



	;IF Y  ==  12
	;SCROLL ONE LINE

	IN_SCROLL_TOP:             
	                           CMP            IN_CURSOR_SEND_Y,22
	                           JNE            IN_FINISH_FIRST_HALF
	                           MOV            AH,6                                	; FUNCTION 6
	                           MOV            AL,1                                	; SCROLL BY 1 LINE
	                           MOV            BH,0                                	; NORMAL VIDEO ATTRIBUTE
	                           MOV            CH,21                               	; UPPER LEFT Y
	                           MOV            CL,0                                	; UPPER LEFT X
	                           MOV            DH,22                               	; LOWER RIGHT Y
	                           MOV            DL,19                               	; LOWER RIGHT X
	                           INT            10H


	                           DEC            IN_CURSOR_SEND_Y

	IN_FINISH_FIRST_HALF:      

	;SET NEW CURSOR POSITION
	                           MOV            AH,2
	                           MOV            DL ,IN_CURSOR_SEND_X
	                           MOV            DH ,IN_CURSOR_SEND_Y
	                           INT            10H

	                           MOV            AL,0
	                           RET
IN_DISPLAY_IN_FIRST_HALF ENDP







IN_DISPLAY_IN_SECOND_HALF PROC
	; CHECK IF ENTER PRESSED?
	; IF YES START NEW LINE
	; ELSE SKIP THIS PART
	                           mov            al,IN_VALUE_REC
	                           cmp            al,8
	                           jne            ttss
	                           ret
	                       
	ttss:                      
	                           
	                           CMP            al,13
	                           JNE            IN_SET_CURSOR_FOR_PRINT2


	IN_NEXT_LINE2:             
	; THIS BLOCK STORES END OF LINE
	; THEN STARTS NEW ONE AND SCROLLS
	                           INC            IN_CURSOR_REC_Y
	                           MOV            IN_CURSOR_REC_X,21
	                           JMP            IN_SCROLL_BOTTOM
						   

	IN_SET_CURSOR_FOR_PRINT2:  
	; THIS BLOCK SET THE CURSOR TO X,Y
	                           MOV            AH,2
	                           MOV            DL ,IN_CURSOR_REC_X
	                           MOV            DH ,IN_CURSOR_REC_Y
	                           INT            10H
	
	; THIS BLOCK PRINTS THE VALUE_SENT
	                           MOV            AH,0ah
	                           MOV            BH,0
	                           MOV            AL ,IN_VALUE_REC
	                           MOV            CX,1H
	                           MOV            BL,02H
	                           INT            10H

	                           INC            IN_CURSOR_REC_X

	;IF END OF LINE DON'T FINISH
	                           CMP            IN_CURSOR_REC_X ,40
	                           JNE            IN_FINISH_SECOND_HALF
	                           JMP            IN_NEXT_LINE2



				
	;IF Y  ==  25
	;SCROLL ONE LINE

	IN_SCROLL_BOTTOM:          
	                           CMP            IN_CURSOR_REC_Y,22
	                           JNE            IN_FINISH_SECOND_HALF
	                           MOV            AH,6                                	; FUNCTION 6
	                           MOV            AL,1                                	; SCROLL BY 1 LINE
	                           MOV            BH,0                                	; NORMAL VIDEO ATTRIBUTE
	                           MOV            CH,21                               	; UPPER LEFT Y
	                           MOV            CL,21                               	; UPPER LEFT X
	                           MOV            DH,22                               	; LOWER RIGHT Y
	                           MOV            DL,39                               	; LOWER RIGHT X
	                           INT            10H
	


	                           DEC            IN_CURSOR_REC_Y

	IN_FINISH_SECOND_HALF:     
	;SET NEW CURSOR POSITION
	                           MOV            AH,2
	                           MOV            DL ,IN_CURSOR_REC_X
	                           MOV            DH ,IN_CURSOR_REC_Y
	                           INT            10H
						   
	                           MOV            AL,0
	                           RET
IN_DISPLAY_IN_SECOND_HALF ENDP

in_game_chat PROC
	;INITIALIZE SCREEN
	                           call           emptysatusbar
	                           mov            cx,22
	                           lea            si,PRESS_BACKSPACE
	                           mov            dh, 24                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	w2:                        
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0Eh                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           w2
							   
	                           							   
	                           CALL           INITIALIZE
	                           call           SPLIT_SCREEN_2

							   
	                           mov            CURSOR_SEND_X,0
	                           mov            CURSOR_SEND_Y,20
							   
	                           mov            ax, offset name1[2]
	                           mov            si, ax
	                           mov            cx,28

	                           mov            ah,2
	                           mov            dl,CURSOR_SEND_X                    	;x coordinates
	                           mov            dh,CURSOR_SEND_Y                    	;y coordinates
	                           int            10h

	print_name12:              
	                           mov            ah,2
	                           mov            dl,CURSOR_SEND_X                    	;x coordinates
	                           mov            dh,CURSOR_SEND_Y                    	;y coordinates
	                           int            10h

	                           MOV            AH,0eh
	                           MOV            BH,0
	                           MOV            AL ,[si]
	                           cmp            al,13
	                           je             break310
	                           inc            si
	                           push           cx
	                           MOV            CX,1H
	                           MOV            BL,0cH
	                           INT            10H
	                           pop            cx
	                           inc            CURSOR_SEND_X
	                           loop           print_name12
	break310:                  
	
	                           MOV            AH,0eh
	                           MOV            BH,0
	                           MOV            AL ,':'
	                           MOV            CX,1H
	                           MOV            BL,0cH
	                           INT            10H

	                           mov            CURSOR_SEND_X,21
	                           mov            CURSOR_SEND_Y,20
							   
	                           lea            ax,name2
	                           mov            si, ax
	                           mov            cx,28

	                           mov            ah,2
	                           mov            dl,CURSOR_SEND_X                    	;x coordinates
	                           mov            dh,CURSOR_SEND_Y                    	;y coordinates
	                           int            10h

	print_name1000:            
	                           mov            ah,2
	                           mov            dl,CURSOR_SEND_X                    	;x coordinates
	                           mov            dh,CURSOR_SEND_Y                    	;y coordinates
	                           int            10h

	                           MOV            AH,0eh
	                           MOV            BH,0
	                           MOV            AL ,[si]
	                           cmp            al,13
	                           je             break111
	                           inc            si
	                           push           cx
	                           MOV            CX,1H
	                           MOV            BL,0dH
	                           INT            10H
	                           pop            cx
	                           inc            CURSOR_SEND_X
	                           loop           print_name1000
	break111:                  
	                           MOV            AH,9
	                           MOV            BH,0
	                           MOV            AL ,':'

	                           MOV            CX,1H
	                           MOV            BL,0dH
	                           INT            10H


	                           mov            IN_CURSOR_SEND_X,0
	                           mov            IN_CURSOR_SEND_Y,21

	                           mov            IN_CURSOR_REC_X ,21
	                           mov            IN_CURSOR_REC_Y ,21
	;THE RECEIVE LOOP TAKES THE RECEIVED CHARACTERS ONE BY ONE AND CALLS THE PRINTING PROC ON EACH

	INn_CHECK_RECEIVE:         
	                           MOV            AL,0
	                           MOV            DX , 3FDH                           	; LINE STATUS REGISTER
	                           IN             AL , DX
	                           TEST           AL , 1
	                           JZ             IN_NOTHING_TO_RECEIVE               	;NOT READY


	                           MOV            DX , 03F8H                          	; RECEIVE REGISTER
	                           IN             AL , DX
	                           MOV            IN_VALUE_REC , AL                   	; STORE THE VALUE RECEIVED IN THE VARIABLE

	                           CMP            AL,8                                	;IF RECEIVED ESCAPE CHARACTER EXIT
	                           JE             IN_ESCAPE_EXIT

	                           CALL           IN_DISPLAY_IN_SECOND_HALF
	                           JMP            INn_CHECK_RECEIVE




	;IF NOTHING TO RECIEVE SEND CHARACTER IF ANY
	IN_NOTHING_TO_RECEIVE:     
	                           MOV            AL,0

	                           MOV            AH,01H
	                           INT            16H                                 	;GET THE STATE OF KEYBOARD BUFFER

	                           CMP            AL,0
	                           JE             INn_CHECK_RECEIVE                   	;IF NOTHING IN UNPUT -> RECEIVE

	                           MOV            AH,00H                              	;READ THE CHAR AND PUT IN AL
	                           INT            16H
	                           MOV            IN_VALUE_SENT,AL                    	;STORE DATA TO SEND

	;CHECK THAT TRANSMITTER HOLDING REGISTER IS EMPTY
	                           MOV            DX , 3FDH                           	;LINE STATUS REGISTER
	                           IN             AL , DX                             	;READ LINE STATUS
	                           TEST           AL , 00100000B
	                           JZ             INn_CHECK_RECEIVE                   	;NOT EMPTY
						   

	;IF EMPTY PUT THE VALUE IN TRANSMIT DATA REGISTER
	                           MOV            DX , 3F8H                           	; TRANSMIT DATA REGISTER
	                           MOV            AL,IN_VALUE_SENT
	                           OUT            DX , AL

	                           CMP            AL,8
	                           JE             IN_ESCAPE_EXIT
	                           CALL           IN_DISPLAY_IN_FIRST_HALF
	                           JMP            INn_CHECK_RECEIVE

	IN_ESCAPE_EXIT:            
	                           call           emptysatusbar
	                           mov            cx,17
	                           lea            si,PRESS_ESCAPE
	                           mov            dh, 24                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	y2:                        
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0Eh                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           y2
	                           CALL           SPLIT_SCREEN_2
	                           ret
in_game_chat ENDP

	;description
SEND_Key PROC
	sedd:                      
	                           MOV            DX , 3FDH
	                           IN             AL , DX
	                           TEST           AL , 00100000B
	                           JZ             sedd

	                           MOV            DX , 3F8H
	                           MOV            AL, ah
	                           OUT            DX , AL

	                           ret
SEND_Key ENDP

	;description
Recieve_key PROC
	;recieve
	ret_fail:                  
	                           MOV            DX , 3FDH
	                           IN             AL , DX
	                           TEST           AL , 1
	                           JZ             ret_fail

	                           MOV            DX , 03F8H
	                           IN             AL , DX
	                           mov            ah , AL

	                           cmp            ah,up
	                           jne            nex1
	                           mov            ah,w
	nex1:                      
	                           cmp            ah,down
	                           jne            nex2
	                           mov            ah,s
	nex2:                      
	                           cmp            ah,right
	                           jne            nex3
	                           mov            ah,d
	nex3:                      
	                           cmp            ah,left
	                           jne            nex4
	                           mov            ah,a
	nex4:                      cmp            ah,f3
	                           jne            nex5
	                           call           in_game_chat

	nex5:                      
	                           ret
Recieve_key ENDP
send_esc PROC
	                           push           ax
	seasd:                     
	                           MOV            DX , 3FDH
	                           IN             AL , DX
	                           TEST           AL , 00100000B
	                           JZ             seasd

	                           MOV            DX , 3F8H
	                           MOV            AL, escape
	                           OUT            DX , AL

	                           pop            ax
	                           ret
send_esc ENDP

MAIN PROC FAR
	                           MOV            AX,@DATA
	                           MOV            DS,AX
							   
	                           CALL           INITIALIZE
	                           call           GET_Name
	backtomain:                call           PRINT_MAIN_MENU
	                           mov            dl,0
	                           mov            chat_request_recieved,dl
	                           mov            chat_request_sent,dl
	                           mov            level,dl
	CHECK_KEY:                 
	                           call           getanswer
	                           cmp            dl,1
	                           je             callchat
	                           cmp            level,0
	                           jne            road_to_game
	                       
	                           mov            ah, 1                               	; peek
	                           int            16h
	                           jz             CHECK_KEY
	                           mov            ah, 0                               	; get
	                           int            16h
	
	                           cmp            ah,f1
	                           jnz            CHECK_F2
	                           mov            dl,chat_request_recieved
	                           cmp            dl,1
	                           je             callchat
	                           mov            dl,chat_request_sent
	                           cmp            dl,1
	                           je             CHECK_F2
	                           call           sendrequest
	                           jmp            CHECK_F2
	callchat:                  call           send_yes
	                           call           chat
	                           jmp            backtomain
	;jump to chat loop
	road_to_game:              jmp            GAME_LOOP
	CHECK_F2:                  
	                           cmp            ah,f2
	                           jnz            CHECK_ESC
	                           mov            ah,firsttime
	                           cmp            ah,0
	                           je             CheckLevel
	                           jmp            GAME_LOOP
	
	CHECK_ESC:                 
	                           cmp            ah,escape
	                           jnz            CHECK_KEY
	                           MOV            AH,4CH
	                           INT            21H
	
	
	
	
	CheckLevel:                
	                           call           PRINT_Level_MENU
	CHECK_KEYl:                
	                           mov            ah,0
	                           int            16h
	                           call           send_level

	                           cmp            ah,f1
	                           jnz            CHECK_F2l
	                           mov            ah,1
	                           mov            level,ah
	                           jmp            GAME_LOOP
	

	CHECK_F2l:                 
	                           cmp            ah,f2
	                           jnz            CHECK_ESCl
	                           mov            ah,2
	                           mov            level,ah
	                           jmp            GAME_LOOP

	CHECK_ESCl:                
	                           cmp            ah,escape
	                           jnz            CHECK_KEYl
	                           jmp            backtomain

	GAME_LOOP:                 
	;enter video mode
	                           MOV            AX,0013H
	                           INT            10H
	                           DRAW_IMAGE     img,imgW,imgH,imgx,imgy
							   
	                           mov            cx,40
	                           lea            si,STATUS_BAR_SEPRATOR
	                           mov            dh, 23                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	w1:                        
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0Eh                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           w1

	                           mov            cx,17
	                           lea            si,PRESS_ESCAPE
	                           mov            dh, 24                              	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0                               	;Column
	                           mov            ah, 2h                              	;SetCursorPosition
	                           int            10h
	u2:                        
	                          
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0Eh                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           u2
							   
	;initial_draw
	                           call           Draw_Maze
	                           lea            si,object
	                           mov            bx,object_size
	                           mov            cx,object_start_x
	                           mov            dx,object_start_y
	                           call           DRAW_OBJECT

	                           lea            si,object2
	                           mov            bx,object2_size
	                           mov            cx,object2_start_x
	                           mov            dx,object2_start_y
	                           call           DRAW_OBJECT
	                          
	                           call           Draw_PowersUp
                              
	    
	                          
							  
	                           mov            cx,1
	Main_Loop:                 
	                           push           cx
	                           mov            ah,1
	                           mov            firsttime,ah
	                           call           HANDLE_INPUT
	                           xchg           ah,al
	                           call           SEND_Key
	                           cmp            ah,escape
	                           jz             exitbr

	                           cmp            ah,f3
	                           jne            Continue500
	                           call           in_game_chat

	Continue500:               
	                           call           DO_MOTION
	                           call           touching_powerUp1
	                           call           chk_touching_ghost
	                           cmp            ax,1
	                           je             exit1

                                   
	                           call           Recieve_key
							   
	                           cmp            ah,escape
	                           jz             exitbr
	                           call           DO_MOTION2
	                           call           touching_powerUp2
	                           call           chk_touching_ghost2
	                           cmp            ax,1
	                           je             exit2
                                 
                                   
	                           call           bothtouching
	                           cmp            ax,1
	                           je             exit3

	                           call           doesp1win
	                           cmp            ax,1
	                           je             exit2
	                           mov            ax,0
	                           call           doesp2win
	                           cmp            ax,1
	                           je             exit1
	 
                                   
	NoKey:                     pop            cx
	                           inc            cx
                               
                               
	                           call           DO_G1_MOTION
	                           call           DO_G2_MOTION
	                           call           DO_G3_MOTION
	                           call           Draw_PowersUp
	                           loop           Main_Loop
                      
	exit1:                     
	                           mov            cx,24
	                           lea            si,p1_lost
	                           mov            dh, 16h                             	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0ah                             	;Column
	                           mov            ah, 02h                             	;SetCursorPosition
	                           int            10h
	                           jmp            writing
	exitbr:                    jmp            exit
	exit2:                     
	                           mov            cx,24
	                           lea            si,p2_lost
	                           mov            dh, 16h                             	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0ah                             	;Column
	                           mov            ah, 02h                             	;SetCursorPosition
	                           int            10h
	                           jmp            writing
        	
	exit3:                     
	                           mov            cx,9
	                           lea            si,bothlost
	                           mov            dh, 16h                             	;Row
	                           mov            bh, 0                               	;Display page
	                           mov            dl, 0ah                             	;Column
	                           mov            ah, 02h                             	;SetCursorPosition
	                           int            10h
	                           jmp            writing
	writing:                   
	                         
	                           mov            al, [si]
	                           mov            bl, 0Ch                             	;Color is red
	                           mov            bh, 0                               	;Display page
	                           mov            ah, 0Eh                             	;Teletype
	                           int            10h
	                           inc            si
	                           loop           writing
	; call            emptysatusbar
	exit:                      
	                           call           send_esc
	                           jmp            backtomain
                                  

MAIN ENDP

END MAIN